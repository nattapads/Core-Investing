//NSal
//@version=5
strategy("[STR] Modified TTC & Carry [6395]", overlay = true, margin_long = 50, margin_short = 50, pyramiding = 100, initial_capital = 10000, risk_free_rate = 1, commission_value = 0.165)

//------------------------------------------------------------------------------
//Settings
//-----------------------------------------------------------------------------{
startTime                   = input.time(timestamp("Jan 01 1970 00:00:00"), title = "Start Time")
inTimeWindow                = time >= startTime

//------------------------------------------------------------------------------
//Turtle Trade Channels Settings
//-----------------------------------------------------------------------------{
entryLength                 = input.int(20,         minval = 1, title = "Entry Length", group="TTC Settings")
exitLength                  = input.int(10,         minval = 1, title = "Exit Length", group="TTC Settings")
contrarianEntry             = input(true,           title = "Contrarian Entry", group="TTC Settings")

//-----------------------------------------------------------------------------}
//Momentum  Settings
//-----------------------------------------------------------------------------{
moProp                      = input.float(0.5,      maxval = 0.99, step = 0.1, title = "Momentum Proportion (%)", group="Momentum Settings")
fastMoScalar                = input.float(4.10,     step = 0.01, title = "Fast Forecast Scalar", group = "Momentum Settings")
mediumMoScalar              = input.float(2.79,     step = 0.01, title = "Medium Forecast Scalar", group = "Momentum Settings")
slowMoScalar                = input.float(1.91,     step = 0.01, title = "Slow Forecast Scalar", group = "Momentum Settings")
zeroLag                     = input(true,           title ="Acceleration-Adjusted Momentum", group = "Momentum Settings")
showTrend                   = input(false,          title = "Show Momentum Line", group = "Momentum Settings")

//------------------------------------------------------------------------------
//Mean Reversion Settings
//-----------------------------------------------------------------------------{
earlyEntry                  = input(true,           title = "Early Entry (US Stock or Index Only)", group = "Mean Reversion Settings")

//-----------------------------------------------------------------------------}
//Carry Settings
//-----------------------------------------------------------------------------{
crProp                      = input.float(0.5,      maxval = 0.99, step = 0.1, title = "Carry Proportion (%)", group="Carry Settings", tooltip = "Higher proportion causes higher percent risk")
expectedDiv                 = input.float(0.03,     maxval = 0.99, step = 0.001, title = "Expected Annualised Return % (%)", group="Carry Settings", tooltip = "Expacted dividend yield or Median dividend yield")
crScalar                    = input.int(30,         step = 1, title = "Carry Scalar", group = "Carry Settings")

//-----------------------------------------------------------------------------}
//Risk Settings
//-----------------------------------------------------------------------------{
simpleStdLength             = input.int(22,         title = "Simple SD Length", group="Risk Settings")
expoStdLength               = input.int(32,         title = "Exponential SD Length", group="Risk Settings")
targetRisk                  = input.float(0.23,     maxval = 1, step = 0.01, title = "Target Risk (%)", group="Risk Settings", tooltip = "23% is recommended for trading less than 3 instruments")
deviationChange             = input.float(0.1,      maxval = 1, step = 0.1, title = "Change Sensitivity (%)", group="Risk Settings", tooltip = "Higher sensitivity causes less frequent trades, and lower trading costs")
forcastDiverMuliplier       = input.float(1.29,     step = 0.01, title = "Forecast Diversification Multiplier", group = "Risk Settings")
riskFree                    = input.float(0.01,     step = 0.01, title = "Risk-free Rate (%)", group = "Risk Settings")
useExpoStd                  = input(false,          title = "Use Exponential Standard Deviation", group="Risk Settings")
useMarginAcc                = input(false,          title = "Margin Account", group="Risk Settings")

//-----------------------------------------------------------------------------{
//Instrument Risk Calculation
//-----------------------------------------------------------------------------{
percentChange               = array.new_float(0)
returnChange                = close
lamda                       = 2.0 / (expoStdLength + 1.0)

// Loop through the last price change and add them to the array
if useExpoStd == true
    for i = 0 to expoStdLength
        returnChange        = (returnChange[i] - returnChange[i+1]) / returnChange[i+1]
        LambaWeight         = math.pow((1 - lamda), i)
        array.push(percentChange, (returnChange * LambaWeight))
else
    for i = 0 to simpleStdLength
        returnChange        = (returnChange[i] - returnChange[i+1]) / returnChange[i+1]
        array.push(percentChange, returnChange)

// Calculate the standard deviation of the percent change
rawdailyPercentVol          = math.round(array.stdev(percentChange, false), 6)

// Calculate 8-year (2000 Records) average of SDs (for Exponential SD only)
return8Yr                   = array.new_float(0)

if useExpoStd == true
    for i = 0 to 2000
        array.push(return8Yr, rawdailyPercentVol[i])

dailyPercentVol8Yr          = array.avg(return8Yr)

// Annualising Instrument Risk
dailyPercentVol             = useExpoStd ? ((0.3 * dailyPercentVol8Yr) + (0.7 * rawdailyPercentVol)) : rawdailyPercentVol
instRisk                    = math.round((dailyPercentVol * 16), 6)
dailyPriceVol               = dailyPercentVol * close

//------------------------------------------------------------------------------
//Turtle Trade Channels Variables
//-----------------------------------------------------------------------------{
lower                       = ta.lowest(entryLength)
upper                       = ta.highest(entryLength)
up                          = ta.highest(high, entryLength)
down                        = ta.lowest(low, entryLength)
sUp                         = ta.highest(high, exitLength)
sDown                       = ta.lowest(low, exitLength)

//------------------------------------------------------------------------------
//Turtle Trade Channels Calucation
//-----------------------------------------------------------------------------{
k1                          = ta.barssince(high >= up[1]) <= ta.barssince(low <= down[1]) ? down : up
barSince1                   = ta.barssince(high >= up[1])
barSince2                   = ta.barssince(low <= down[1])
k2                          = barSince1 <= barSince2 ? sDown : sUp
k3                          = close > k1 ? down : na
k4                          = close < k1 ? up : na

buySignal                   = high == upper[1] or ta.crossover(high, upper[1])
sellSignal                  = low == lower[1] or ta.crossover(lower[1], low)
buyExit                     = low == sDown[1] or ta.crossover(sDown[1], low)
sellExit                    = high == sUp[1] or ta.crossover(high, sUp[1])

o1                          = ta.barssince(buySignal)
o2                          = ta.barssince(sellSignal)
o3                          = ta.barssince(buyExit)
o4                          = ta.barssince(sellExit)

e1                          = ta.barssince(buySignal[1])
e2                          = ta.barssince(sellSignal[1])

//-----------------------------------------------------------------------------}
//Momentum Calculation
//-----------------------------------------------------------------------------{
fmomentumCal(length, multiplier) =>
    EmaLength               = length * multiplier

    if zeroLag == true
        Ema                 = ta.ema(close, EmaLength)
        smoEma              = ta.ema(Ema, EmaLength)
        eq                  = Ema - smoEma
        zlEma               = Ema + eq
    else
        zlEma               = ta.ema(close, EmaLength)

fastMoLength                = 16
mediumMoLength              = 32
slowMoLength                = 64

fastEma                     = fmomentumCal(fastMoLength, 1)
fastSEma                    = fmomentumCal(fastMoLength, 4)
mediumEma                   = fmomentumCal(mediumMoLength, 1)
mediumSEma                  = fmomentumCal(mediumMoLength, 4)
slowEma                     = fmomentumCal(slowMoLength, 1)
slowSEma                    = fmomentumCal(slowMoLength, 4)

//-----------------------------------------------------------------------------}
//Momentum Forcast Calculation
//-----------------------------------------------------------------------------{
//Scale Momentum Forecast
//-----------------------------------------------------------------------------{
scalforecastMo(fastEma, slowEma, volatility, scalar) =>
    riskAdjusted            = (fastEma - slowEma) / volatility
    scaledForecast          = riskAdjusted * scalar

scaledForcF                 = scalforecastMo(fastEma, fastSEma, dailyPriceVol, fastMoScalar)
scaledForcM                 = scalforecastMo(mediumEma, mediumSEma, dailyPriceVol, mediumMoScalar)
scaledForcS                 = scalforecastMo(slowEma, slowSEma, dailyPriceVol, slowMoScalar)

//Capped Momentum Forecast
//-----------------------------------------------------------------------------{
capforecastMo(scaledForc) =>
    var float cappedForcMo  = na

    if scaledForc <= -20
        cappedForcMo        := -20
    else if scaledForc > -20 and scaledForc < 20
        cappedForcMo        := scaledForc
    else if scaledForc >= 20
        cappedForcMo        := 20

cappedForcF                 = capforecastMo(scaledForcF)
cappedForcM                 = capforecastMo(scaledForcM)
cappedForcS                 = capforecastMo(scaledForcS)

cappedForcMoAr              = array.from(cappedForcF, cappedForcM, cappedForcS)

//-----------------------------------------------------------------------------}
//Carry Forcast Calculation
//-----------------------------------------------------------------------------{
capforecastCr(expectedDiv, smoothLength, instRisk, ForecastScalar) =>
    var float cappedForcCr  = na

    crForc                  = expectedDiv * ForecastScalar / instRisk
    scaledForcCr            = ta.ema(crForc, smoothLength)

    if scaledForcCr <= -20
        cappedForcCr        := -20
    else if scaledForcCr > -20 and scaledForcCr < 20
        cappedForcCr        := scaledForcCr
    else if scaledForcCr >= 20
        cappedForcCr        := 20 

cappedForcCr20              = capforecastCr(expectedDiv, 20, instRisk, crScalar)
cappedForcCr60              = capforecastCr(expectedDiv, 60, instRisk, crScalar)
cappedForcCr120             = capforecastCr(expectedDiv, 120, instRisk, crScalar)

cappedForcCrAr              = array.from(cappedForcCr20, cappedForcCr60, cappedForcCr120)

//All Forecast Combination
//-----------------------------------------------------------------------------{
cappedForcMo                = array.avg(cappedForcMoAr)
cappedForcCr                = array.avg(cappedForcCrAr)

//All Forecast Combination
//-----------------------------------------------------------------------------{
var float cappedCombForc    = na

combForc                    = (cappedForcMo * moProp) + (cappedForcCr * crProp)
scalCombForc                = combForc * forcastDiverMuliplier

if scalCombForc <= -20
    cappedCombForc          := -20
else if scalCombForc > -20 and scalCombForc < 20
    cappedCombForc          := scalCombForc
else if scalCombForc >= 20
    cappedCombForc          := 20 

adjCombForc                 = useMarginAcc ? cappedCombForc / 10 : cappedCombForc / 20

//-----------------------------------------------------------------------------}
//Mean Reversion Settings
//-----------------------------------------------------------------------------{
volatilityRef               = input.symbol(title = "Primary Source", defval="S5TH", group = "Volatility Settings", inline = "source")
quantileVol                 = request.security(volatilityRef, "D", close)

//-----------------------------------------------------------------------------}
//Momentum Filter Calculation
//-----------------------------------------------------------------------------{
trendDiff                   = slowEma - slowSEma
strongBullish               = trendDiff[0] > trendDiff[1] and trendDiff >= 0
strongBearish               = trendDiff[0] < trendDiff[1] and trendDiff < 0
bullish                     = trendDiff[0] < trendDiff[1] and trendDiff >= 0
bearish                     = trendDiff[0] > trendDiff[1] and trendDiff < 0

//-----------------------------------------------------------------------------}
//Notional Exposure & Risk-Adjusted Position
//-----------------------------------------------------------------------------{
invNotionalExposure         = strategy.equity * targetRisk * cappedForcCr / instRisk
invSize                     = math.round(invNotionalExposure / close, 0)

optimalSizing               = (adjCombForc * strategy.equity * targetRisk) / (instRisk * close)
optimalPosition             = math.round(optimalSizing, 0)

//Buffer Zone
//-----------------------------------------------------------------------------{
bufferWidth                 = (deviationChange * strategy.equity * targetRisk) / (instRisk * close)
lowerBuffer                 = math.round(optimalPosition - bufferWidth, 0)
upperBuffer                 = math.round(optimalPosition + bufferWidth, 0)
currentSize                 = strategy.position_size

//Current Proportion
//-----------------------------------------------------------------------------{
currentHoldingValue         = strategy.position_size * close
currentProportion           = currentHoldingValue / strategy.equity

if currentProportion >= 1 and useMarginAcc == true
    currentProportion       := currentProportion
else if currentProportion >= 1 and useMarginAcc == false
    currentProportion       := 1

recSize                     = math.round(optimalPosition - strategy.position_size, 0)

//Position Adjustment Signal & Sizing
//-----------------------------------------------------------------------------{
buyBufferGap                = lowerBuffer > currentSize

invQty                      = invSize - currentSize
buyQty                      = lowerBuffer - currentSize
adjustBuyQty                = currentSize - lowerBuffer

earlyBuy                    = earlyEntry ? ta.crossover(quantileVol, 20) and invSize > currentSize : na
initialBuy                  = ta.crossover(slowEma, slowSEma) and recSize > 0
Buy                         = contrarianEntry ? (buyExit and o1 < o3[1] and strongBullish and buyBufferGap == true) or (buyExit and o1 < o3[1] and bullish and buyBufferGap == true) : (buySignal and o3 < o1[1] and strongBullish and buyBufferGap == true) or (buySignal and o3 < o1[1] and bullish and buyBufferGap == true)
adjustBuy                   = (buyExit and o1 < o3[1] and strongBullish and currentSize > upperBuffer) or (buyExit and o1 < o3[1] and bullish and currentSize > upperBuffer) or (sellSignal and o4 < o2[1] and strongBullish and currentSize > upperBuffer) or (sellSignal and o4 < o2[1] and bullish and currentSize > upperBuffer)
exitBuy                     = ta.crossunder(slowEma, slowSEma)

//-----------------------------------------------------------------------------}
//Strategy
//-----------------------------------------------------------------------------{ 
if earlyBuy and inTimeWindow
    strategy.entry("B", strategy.long, qty = invQty)
else if initialBuy and inTimeWindow
    strategy.entry("B", strategy.long, qty = recSize)
else if Buy and inTimeWindow
    strategy.entry("B", strategy.long, qty = buyQty)
else if adjustBuy and inTimeWindow
    strategy.close("B", qty = adjustBuyQty)
else if exitBuy and inTimeWindow
    strategy.close("B", qty_percent = moProp * 100)

// Calculate Strategy Performance
//-----------------------------------------------------------------------------{ 
avgDrawDown() =>
    winArr                  = array.new_float()
    lossArr                 = array.new_float()
    
    for i = 0 to strategy.closedtrades -1 
        
        drawDown            = strategy.closedtrades.max_drawdown(i)
        costBasis           = strategy.closedtrades.entry_price(i)
        drawDownPerc        = drawDown / (costBasis * strategy.closedtrades.size(i))
        
        isWin               = strategy.closedtrades.profit(i) >= 0
        
        if isWin
            array.push(winArr, drawDownPerc)
        else
            array.push(lossArr, drawDownPerc)

    [array.avg(winArr), array.avg(lossArr)]

totalYears                  = bar_index / 256
rawAvgAnnualReturn          = strategy.netprofit / (strategy.initial_capital * totalYears)
avgAnnualReturn             = rawAvgAnnualReturn * 100
SharpeRatio                 = (rawAvgAnnualReturn - riskFree) / instRisk

[win, loss]                 = avgDrawDown()
avgWinDD                    = win
AvgLossDD                   = loss
avgDD                       = (avgWinDD + AvgLossDD) / 2

//Table Styling
//-----------------------------------------------------------------------------{ 
bgMColour                   = color.rgb(0, 0, 0, 30)
bgSColour                   = color.rgb(0, 0, 0, 20)
    
if strategy.netprofit > 0
    bgMColour               := color.rgb(8, 153, 129)
    bgSColour               := color.rgb(8, 153, 129, 20)
else
    bgMColour               := color.rgb(242, 54, 69)
    bgSColour               := color.rgb(242, 54, 69, 20)
    
//-----------------------------------------------------------------------------}
//Performance Table
//-----------------------------------------------------------------------------{ 
table_data                  = table.new(position = position.top_right, columns = 1, rows = 6, bgcolor = color.rgb(0, 0, 0, 100), frame_width = 1, border_width = 1)

table.cell(table_data, 0, 0, "MTT782", bgcolor = color.rgb(255, 255, 255, 70), text_size = size.normal, text_color = color.rgb(255, 255, 255))   
table.cell(table_data, 0, 1, str.tostring(avgAnnualReturn, format.percent) , text_size = size.normal, bgcolor = bgMColour, text_color = color.rgb(255, 255, 255), text_halign  = text.align_center, tooltip = "Average Annual Return")
table.cell(table_data, 0, 2, str.tostring(math.round(SharpeRatio, 3)), text_size = size.normal, bgcolor = bgSColour, text_color = color.rgb(255, 255, 255), text_halign  = text.align_center, tooltip = "Sharpe Ratio")
table.cell(table_data, 0, 3, str.tostring(avgDD * 100, format.percent), text_size = size.normal, bgcolor = color.rgb(242, 54, 69, 30), text_color = color.rgb(255, 255, 255), text_halign  = text.align_center, tooltip = "Average drawDown")
table.cell(table_data, 0, 4, str.tostring(instRisk * 100, format.percent), text_size = size.normal, bgcolor = color.rgb(242, 54, 70, 70), text_color = color.rgb(255, 255, 255), text_halign  = text.align_center, tooltip = "Standard Deviation")
table.cell(table_data, 0, 5, str.tostring(currentProportion * 100, format.percent), bgcolor = color.rgb(255, 255, 255, 90), text_size = size.normal, text_color = color.rgb(255, 255, 255), tooltip = "Percent Risk")

//-----------------------------------------------------------------------------}
//Entry & Exit Signal
//-----------------------------------------------------------------------------{
plotshape(earlyBuy,         title = "Early Buy",    text = "●", textcolor = color.white, style=shape.labelup, location=location.belowbar, color=color.rgb(8, 153, 129, 30), size=size.tiny)
plotshape(initialBuy,       title = "Initial Buy",  text = "▲", textcolor = color.white, style=shape.labelup, location=location.belowbar, color=color.rgb(8, 153, 129), size=size.tiny)
plotshape(Buy,              title = "Buy",          text = "▲", textcolor = color.white, style=shape.labelup, location=location.belowbar, color=color.rgb(8, 153, 129), size=size.tiny)
plotshape(adjustBuy,        title = "Adjust Buy",   text = "✘", textcolor = color.white, style=shape.labeldown, location=location.abovebar, color=color.rgb(242, 54, 69), size=size.tiny)
plotshape(exitBuy,          title = "Exit Buy",     text = "✘", textcolor = color.white, style=shape.labeldown, location=location.abovebar, color=color.rgb(242, 54, 69), size=size.tiny)

//-----------------------------------------------------------------------------}
//Bar & Trend Line Colours
//-----------------------------------------------------------------------------{
neutralColor                = #56328f
strongBullColor             = color.rgb(8, 153, 129)
bullColor                   = color.rgb(8, 153, 129, 50)
strongBearishColor          = color.rgb(242, 54, 69)
bearColor                   = color.rgb(242, 54, 69, 50)

//Style Adjustment
//-----------------------------------------------------------------------------{
var col                     = color.rgb(120, 123, 134, 100)
var fillG                   = color.rgb(120, 123, 134, 100)

if trendDiff[0] > trendDiff[1] and trendDiff >= 0 and showTrend == true
    col                     := bullColor
    fillG                   := color.rgb(8, 153, 129, 92)
else if trendDiff[0] < trendDiff[1] and trendDiff >= 0 and showTrend == true
    col                     := bullColor
    fillG                   := color.rgb(8, 153, 129, 96)
else if trendDiff[0] < trendDiff[1] and trendDiff < 0 and showTrend == true
    col                     := bearColor
    fillG                   := color.rgb(242, 54, 70, 92)
else if trendDiff[0] > trendDiff[1] and trendDiff < 0 and showTrend == true
    col                     := bearColor
    fillG                   := color.rgb(242, 54, 70, 96)
else
    col                     := color.rgb(120, 123, 134, 100)
    fillG                   := color.rgb(120, 123, 134, 100)

plotFastMA                  = plot(slowEma,     "Fast Momentum", color=col, linewidth=1) 
plotSlowMA                  = plot(slowSEma,    "Slow Momentum", color=col, linewidth=1)

fill(plotFastMA, plotSlowMA, color = fillG, title = "Momentum Color", fillgaps = true) 
barcolor(strongBullish ? strongBullColor : strongBearish ? strongBearishColor : bullish ? bullColor : bearish ? bearColor : neutralColor)

//-----------------------------------------------------------------------------}
//Alert
//-----------------------------------------------------------------------------{
if earlyBuy or initialBuy or Buy or adjustBuy
    alert("Buy Position Adjusted", alert.freq_once_per_bar_close)
else if exitBuy
    alert("Exit Buy", alert.freq_once_per_bar_close)

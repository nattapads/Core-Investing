//NSal
//@version=5
strategy("[STR] Modified TTC & Carry [6395]", overlay = true, margin_long = 50, margin_short = 50, pyramiding = 100, initial_capital = 10000, risk_free_rate = 1, commission_value = 0.165, process_orders_on_close = true)

//------------------------------------------------------------------------------
//Settings
//-----------------------------------------------------------------------------{
start_time                  = input.time(timestamp("Jan 01 1970 00:00:00"), title="Start Time")
in_time_window              = time >= start_time

//------------------------------------------------------------------------------
//Turtle Trade Channels Settings
//-----------------------------------------------------------------------------{
length                      = input.int(20,         minval = 1, title = "Entry Length", group="TTC Settings")
len2                        = input.int(10,         minval = 1, title = "Exit Length", group="TTC Settings")
ContrarianEntry             = input(true,           title = "Contrarian Entry", group="TTC Settings")

//-----------------------------------------------------------------------------}
//Momentum  Settings
//-----------------------------------------------------------------------------{
FastScalar                  = input.float(4.10,     step = 0.01, title = "Fast Forecast Scalar", group = "Momentum Settings")
MediumScalar                = input.float(2.79,     step = 0.01, title = "Medium Forecast Scalar", group = "Momentum Settings")
SlowScalar                  = input.float(1.91,     step = 0.01, title = "Slow Forecast Scalar", group = "Momentum Settings")
showtrend                   = input(false,          title = "Show Momentum Line", group = "Momentum Settings")

//------------------------------------------------------------------------------
//Mean Reversion Settings
//-----------------------------------------------------------------------------{
EarlyEntry                  = input(true,           title = "Early Entry (US Stock or Index Only)", group = "Mean Reversion Settings")

//-----------------------------------------------------------------------------}
//Carry Settings
//-----------------------------------------------------------------------------{
CrProp                      = input.float(0.5,      maxval = 0.99, step = 0.1, title = "Carry Proportion (%)", group="Carry Settings", tooltip = "Higher proportion causes higher percent risk")
ExpectedDiv                 = input.float(0.03,     maxval = 0.99, step = 0.001, title = "Expected Annualised Return % (%)", group="Carry Settings", tooltip = "Expacted dividend yield or Median dividend yield")
CrScalar                    = input.int(30,         step = 1, title = "Carry Scalar", group = "Carry Settings")

//-----------------------------------------------------------------------------}
//Risk Settings
//-----------------------------------------------------------------------------{
SMStdLength                 = input.int(22,         title = "Simple SD Length", group="Risk Settings")
TargetRisk                  = input.float(0.16,     maxval = 1, step = 0.01, title = "Target Risk (%)", group="Risk Settings", tooltip = "16% is recommended for trading no maore than 3 instruments")
DeviationPer                = input.float(0.1,      maxval = 1, step = 0.1, title = "Change Sensitivity (%)", group="Risk Settings", tooltip = "Higher sensitivity causes less frequent trades, and lower trading costs")
FDM                         = input.float(1.29,     step = 0.01, title = "Forecast Diversification Multiplier", group = "Risk Settings")
RiskFree                    = input.float(0.01,     step = 0.01, title = "Risk-free Rate (%)", group = "Risk Settings")
MarginCal                   = input(false,          title = "Margin Account", group="Risk Settings")

//------------------------------------------------------------------------------
//Turtle Trade Channels Variables
//-----------------------------------------------------------------------------{
lower                       = ta.lowest(length)
upper                       = ta.highest(length)
up                          = ta.highest(high, length)
down                        = ta.lowest(low, length)
sup                         = ta.highest(high, len2)
sdown                       = ta.lowest(low, len2)

//------------------------------------------------------------------------------
//Turtle Trade Channels Calucation
//-----------------------------------------------------------------------------{
K1                          = ta.barssince(high >= up[1]) <= ta.barssince(low <= down[1]) ? down : up
barssince_1                 = ta.barssince(high >= up[1])
barssince_2                 = ta.barssince(low <= down[1])
K2                          = barssince_1 <= barssince_2 ? sdown : sup
K3                          = close > K1 ? down : na
K4                          = close < K1 ? up : na

buySignal                   = high == upper[1] or ta.crossover(high, upper[1])
sellSignal                  = low == lower[1] or ta.crossover(lower[1], low)
buyExit                     = low == sdown[1] or ta.crossover(sdown[1], low)
sellExit                    = high == sup[1] or ta.crossover(high, sup[1])

O1                          = ta.barssince(buySignal)
O2                          = ta.barssince(sellSignal)
O3                          = ta.barssince(buyExit)
O4                          = ta.barssince(sellExit)

E1                          = ta.barssince(buySignal[1])
E2                          = ta.barssince(sellSignal[1])
E3                          = ta.barssince(buyExit[1])
E4                          = ta.barssince(sellExit[1])

//-----------------------------------------------------------------------------{
//Instrument Risk Calculation
//-----------------------------------------------------------------------------{
PercentChange               = array.new_float(0)
AdjustedLength              = SMStdLength - 1
ReturnChange                = close

// Loop through the last price change and add them to the array
for i = 0 to AdjustedLength
    array.push(PercentChange, ((ReturnChange[i] - ReturnChange[i+1]) / ReturnChange[i+1]))

// Calculate the standard deviation of the percent change
DailyPercentVol             = math.round(array.stdev(PercentChange, false), 6)
InstRisk                    = math.round((DailyPercentVol * 16), 6)
DailyPriceVol               = DailyPercentVol * close

//-----------------------------------------------------------------------------}
//Momentum Calculation
//-----------------------------------------------------------------------------{
FastLength                  = 16
MediumLength                = 32
SlowLength                  = 64

//Fast Momentum
//-----------------------------------------------------------------------------{
Fast4Length                 = FastLength * 4
FastEMA                     = ta.ema(close, FastLength)
FastSEMA                    = ta.ema(close, Fast4Length)

//Medium Momentum
//-----------------------------------------------------------------------------{
Medium4Length               = MediumLength * 4
MediumEMA                   = ta.ema(close, MediumLength)
MediumSEMA                  = ta.ema(close, Medium4Length)

//Slow Momentum
//-----------------------------------------------------------------------------{
Slow4Length                 = SlowLength * 4
SlowEMA                     = ta.ema(close, SlowLength)
SlowSEMA                    = ta.ema(close, Slow4Length)

///-----------------------------------------------------------------------------}
//Momentum Forcast Calculation
//-----------------------------------------------------------------------------{
//Fast Momentum Forecast
//-----------------------------------------------------------------------------{
RiskAdjF                    = (FastEMA - FastSEMA) / DailyPriceVol
ScaledForcF                 = RiskAdjF * FastScalar

//Medium Momentum Forecast
//-----------------------------------------------------------------------------{
RiskAdjM                    = (MediumEMA - MediumSEMA) / DailyPriceVol
ScaledForcM                 = RiskAdjM * MediumScalar

//Slow Momentum Forecast
//-----------------------------------------------------------------------------{
RiskAdjS                    = (SlowEMA - SlowSEMA) / DailyPriceVol
ScaledForcS                 = RiskAdjS * SlowScalar

//Capped Momentum Forecast
//-----------------------------------------------------------------------------{
capforecastMo(scaledForc) =>
    var float CappedForcMo  = na

    if scaledForc <= -20
        CappedForcMo        := -20
    else if scaledForc > -20 and scaledForc < 20
        CappedForcMo        := scaledForc
    else if scaledForc >= 20
        CappedForcMo        := 20

CappedForcF                 = capforecastMo(ScaledForcF)
CappedForcM                 = capforecastMo(ScaledForcM)
CappedForcS                 = capforecastMo(ScaledForcS)

//-----------------------------------------------------------------------------}
//Carry Forcast Calculation
//-----------------------------------------------------------------------------{
capforecastCr(ExpectedDiv, smoothLength, InstRisk, ForecastScalar) =>
    var float CappedForcCr  = na

    CrForc                  = ExpectedDiv * ForecastScalar / InstRisk
    scaledForcCr            = ta.ema(CrForc, smoothLength)

    if scaledForcCr <= -20
        CappedForcCr        := -20
    else if scaledForcCr > -20 and scaledForcCr < 20
        CappedForcCr        := scaledForcCr
    else if scaledForcCr >= 20
        CappedForcCr        := 20 

CappedForcCr20              = capforecastCr(ExpectedDiv, 20, InstRisk, CrScalar)
CappedForcCr60              = capforecastCr(ExpectedDiv, 60, InstRisk, CrScalar)
CappedForcCr120             = capforecastCr(ExpectedDiv, 120, InstRisk, CrScalar)

//All Forecast Combination
//-----------------------------------------------------------------------------{
CappedForcMo                = (CappedForcF + CappedForcM + CappedForcS) / 3
CappedForcCr                = (CappedForcCr20 + CappedForcCr60 + CappedForcCr120) / 3

//All Forecast Combination
//-----------------------------------------------------------------------------{
var float CappedCombForc    = na

MoProp                      = 1 - CrProp 
CombForc                    = (CappedForcMo * MoProp) + (CappedForcCr * CrProp)
ScalCombForc                = CombForc * FDM

if ScalCombForc <= -20
    CappedCombForc          := -20
else if ScalCombForc > -20 and ScalCombForc < 20
    CappedCombForc          := ScalCombForc
else if ScalCombForc >= 20
    CappedCombForc          := 20 

AdjCombForc                 = MarginCal ? CappedCombForc / 10 : CappedCombForc / 20

//-----------------------------------------------------------------------------}
//Mean Reversion Settings
//-----------------------------------------------------------------------------{
VolatilityRef               = input.symbol(title = "Primary Source", defval="S5TH", group = "Volatility Settings", inline = "source")
Quantile                    = request.security(VolatilityRef, "D", close)

//-----------------------------------------------------------------------------}
//Momentum Filter Calculation
//-----------------------------------------------------------------------------{
Trenddiff                   = SlowEMA - SlowSEMA
StrongBullish               = Trenddiff[0] > Trenddiff[1] and Trenddiff >= 0
StrongBearish               = Trenddiff[0] < Trenddiff[1] and Trenddiff < 0
Bullish                     = Trenddiff[0] < Trenddiff[1] and Trenddiff >= 0
Bearish                     = Trenddiff[0] > Trenddiff[1] and Trenddiff < 0

//-----------------------------------------------------------------------------}
//Notional Exposure & Risk-Adjusted Position
//-----------------------------------------------------------------------------{
InvNotionalExposure         = strategy.equity * TargetRisk * CappedForcCr / InstRisk
InvSize                     = math.round(InvNotionalExposure / close, 0)

OptimalSizing               = (AdjCombForc * strategy.equity * TargetRisk) / (InstRisk * close)
OptimalPosition             = math.round(OptimalSizing, 0)

//Buffer Zone
//-----------------------------------------------------------------------------{
BufferWidth                 = (DeviationPer * strategy.equity * TargetRisk) / (InstRisk * close)
LowerBuffer                 = math.round(OptimalPosition - BufferWidth, 0)
UpperBuffer                 = math.round(OptimalPosition + BufferWidth, 0)
CurrentSize                 = strategy.position_size

//Current Proportion
//-----------------------------------------------------------------------------{
CurrentHoldingValue         = strategy.position_size * close
CurrentProportion           = CurrentHoldingValue / strategy.equity

if CurrentProportion >= 1 and MarginCal == true
    CurrentProportion       := CurrentProportion
else if CurrentProportion >= 1 and MarginCal == false
    CurrentProportion       := 1

RecSize                     = math.round(OptimalPosition - strategy.position_size, 0)

//Position Adjustment Signal & Sizing
//-----------------------------------------------------------------------------{
BuyBufferGap                = LowerBuffer > CurrentSize

InvQty                      = InvSize - CurrentSize
BuyQty                      = LowerBuffer - CurrentSize
AdjustBuyQty                = CurrentSize - LowerBuffer

EarlyBuy                    = EarlyEntry ? ta.crossover(Quantile, 20) and InvSize > CurrentSize : na
InitialBuy                  = ta.crossover(SlowEMA, SlowSEMA) and RecSize > 0
Buy                         = ContrarianEntry ? (buyExit and O1 < O3[1] and StrongBullish and BuyBufferGap == true) or (buyExit and O1 < O3[1] and Bullish and BuyBufferGap == true) : (buySignal and O3 < O1[1] and StrongBullish and BuyBufferGap == true) or (buySignal and O3 < O1[1] and Bullish and BuyBufferGap == true)
AdjustBuy                   = (buyExit and O1 < O3[1] and StrongBullish and CurrentSize > UpperBuffer) or (buyExit and O1 < O3[1] and Bullish and CurrentSize > UpperBuffer) or (sellSignal and O4 < O2[1] and StrongBullish and CurrentSize > UpperBuffer) or (sellSignal and O4 < O2[1] and Bullish and CurrentSize > UpperBuffer)
ExitBuy                     = ta.crossunder(SlowEMA, SlowSEMA)

//-----------------------------------------------------------------------------}
//Strategy
//-----------------------------------------------------------------------------{ 
if EarlyBuy and in_time_window
    strategy.entry("B", strategy.long, qty = InvQty)
else if InitialBuy and in_time_window
    strategy.entry("B", strategy.long, qty = RecSize)
else if Buy and in_time_window
    strategy.entry("B", strategy.long, qty = BuyQty)
else if AdjustBuy and in_time_window
    strategy.close("B", qty = AdjustBuyQty)
else if ExitBuy and in_time_window
    strategy.close("B", qty_percent = MoProp * 100)

// Calculate Strategy Performance
//-----------------------------------------------------------------------------{ 
avgDrawdown() =>
    winArr                  = array.new_float()
    lossArr                 = array.new_float()
    
    for i = 0 to strategy.closedtrades -1 
        
        drawdown            = strategy.closedtrades.max_drawdown(i)
        costBasis           = strategy.closedtrades.entry_price(i)
        drawdownPerc        = drawdown / (costBasis * strategy.closedtrades.size(i))
        
        isWin               = strategy.closedtrades.profit(i) >= 0
        
        if isWin
            array.push(winArr, drawdownPerc)
        else
            array.push(lossArr, drawdownPerc)

    [array.avg(winArr), array.avg(lossArr)]

TotalYears                  = bar_index / 252
RawAvgAnnualReturn          = strategy.netprofit / (strategy.initial_capital * TotalYears)
AvgAnnualReturn             = RawAvgAnnualReturn * 100
SharpeRatio                 = (RawAvgAnnualReturn - RiskFree) / InstRisk

var float AvgWinDD          = na
var float AvgLossDD         = na
var float AvgDD             = na

if barstate.islast
    [win, loss]             = avgDrawdown()
    AvgWinDD                := win
    AvgLossDD               := loss
    AvgDD                   := (AvgWinDD + AvgLossDD) / 2

//Table Styling
//-----------------------------------------------------------------------------{ 
bgMColour                   = color.rgb(0, 0, 0, 30)
bgSColour                   = color.rgb(0, 0, 0, 20)
    
if strategy.netprofit > 0
    bgMColour               := color.rgb(8, 153, 129)
    bgSColour               := color.rgb(8, 153, 129, 20)
else
    bgMColour               := color.rgb(242, 54, 69)
    bgSColour               := color.rgb(242, 54, 69, 20)
    
//-----------------------------------------------------------------------------}
//Performance Table
//-----------------------------------------------------------------------------{ 
table_data                  = table.new(position = position.top_right, columns = 1, rows = 6, bgcolor = color.rgb(0, 0, 0, 100), frame_width = 1, border_width = 1)

if barstate.islast
    table.cell(table_data, 0, 0, "MTT782", bgcolor = color.rgb(255, 255, 255, 70), text_size = size.normal, text_color = color.rgb(255, 255, 255))   
    table.cell(table_data, 0, 1, str.tostring(AvgAnnualReturn, format.percent) , text_size = size.normal, bgcolor = bgMColour, text_color = color.rgb(255, 255, 255), text_halign  = text.align_center, tooltip = "Average Annual Return")
    table.cell(table_data, 0, 2, str.tostring(math.round(SharpeRatio, 3)), text_size = size.normal, bgcolor = bgSColour, text_color = color.rgb(255, 255, 255), text_halign  = text.align_center, tooltip = "Sharpe Ratio")
    table.cell(table_data, 0, 3, str.tostring(AvgDD * 100, format.percent), text_size = size.normal, bgcolor = color.rgb(242, 54, 69, 30), text_color = color.rgb(255, 255, 255), text_halign  = text.align_center, tooltip = "Average Drawdown")
    table.cell(table_data, 0, 4, str.tostring(InstRisk * 100, format.percent), text_size = size.normal, bgcolor = color.rgb(242, 54, 70, 70), text_color = color.rgb(255, 255, 255), text_halign  = text.align_center, tooltip = "Standard Deviation")
    table.cell(table_data, 0, 5, str.tostring(CurrentProportion * 100, format.percent), bgcolor = color.rgb(255, 255, 255, 90), text_size = size.normal, text_color = color.rgb(255, 255, 255), tooltip = "Percent Risk")

//-----------------------------------------------------------------------------}
//Entry & Exit Signal
//-----------------------------------------------------------------------------{
plotshape(EarlyBuy,         title = "Early Buy",    text = "●", textcolor = color.white, style=shape.labelup, location=location.belowbar, color=color.rgb(8, 153, 129, 30), size=size.tiny)
plotshape(InitialBuy,       title = "Initial Buy",  text = "▲", textcolor = color.white, style=shape.labelup, location=location.belowbar, color=color.rgb(8, 153, 129), size=size.tiny)
plotshape(Buy,              title = "Buy",          text = "▲", textcolor = color.white, style=shape.labelup, location=location.belowbar, color=color.rgb(8, 153, 129), size=size.tiny)
plotshape(AdjustBuy,        title = "Adjust Buy",   text = "✘", textcolor = color.white, style=shape.labeldown, location=location.abovebar, color=color.rgb(242, 54, 69), size=size.tiny)
plotshape(ExitBuy,          title = "Exit Buy",     text = "✘", textcolor = color.white, style=shape.labeldown, location=location.abovebar, color=color.rgb(242, 54, 69), size=size.tiny)

//-----------------------------------------------------------------------------}
//Bar & Trend Line Colours
//-----------------------------------------------------------------------------{
NeutralColor                = #56328f
StrongBullColor             = color.rgb(8, 153, 129)
BullColor                   = color.rgb(8, 153, 129, 50)
StrongBearishColor          = color.rgb(242, 54, 69)
BearColor                   = color.rgb(242, 54, 69, 50)

//Style Adjustment
//-----------------------------------------------------------------------------{
var col                     = color.rgb(120, 123, 134, 100)
var fillG                   = color.rgb(120, 123, 134, 100)

if Trenddiff[0] > Trenddiff[1] and Trenddiff >= 0 and showtrend == true
    col                     := BullColor
    fillG                   := color.rgb(8, 153, 129, 92)
else if Trenddiff[0] < Trenddiff[1] and Trenddiff >= 0 and showtrend == true
    col                     := BullColor
    fillG                   := color.rgb(8, 153, 129, 96)
else if Trenddiff[0] < Trenddiff[1] and Trenddiff < 0 and showtrend == true
    col                     := BearColor
    fillG                   := color.rgb(242, 54, 70, 92)
else if Trenddiff[0] > Trenddiff[1] and Trenddiff < 0 and showtrend == true
    col                     := BearColor
    fillG                   := color.rgb(242, 54, 70, 96)
else
    col                     := color.rgb(120, 123, 134, 100)
    fillG                   := color.rgb(120, 123, 134, 100)

plotFastMA                  = plot(SlowEMA,     "Fast Momentum", color=col, linewidth=1) 
plotSlowMA                  = plot(SlowSEMA,    "Slow Momentum", color=col, linewidth=1)

fill(plotFastMA, plotSlowMA, color = fillG, title = "Momentum Color", fillgaps = true) 
barcolor(StrongBullish ? StrongBullColor : StrongBearish ? StrongBearishColor : Bullish ? BullColor : Bearish ? BearColor : NeutralColor)

//-----------------------------------------------------------------------------}
//Alert
//-----------------------------------------------------------------------------{
if EarlyBuy or InitialBuy or Buy or AdjustBuy
    alert("Buy Position Adjusted", alert.freq_once_per_bar_close)
else if ExitBuy
    alert("Exit Buy", alert.freq_once_per_bar_close)

//NSal
//@version=5
strategy("[STR] Carry & MAC [6395]", overlay = true, margin_long = 50, margin_short = 50, pyramiding = 100, initial_capital = 10000, risk_free_rate = 1)

//-----------------------------------------------------------------------------}
//Trend Settings
//-----------------------------------------------------------------------------{
length4             = input.int(12,         step = 1, title = 'Fast Length', group = "Trend Settings")
length5             = input.int(25,         step = 1, title = 'Medium Length', group = "Trend Settings")
length6             = input.int(50,         step = 1, title = 'Slow Length', group = "Trend Settings")
zerolag             = input(true,           title ="Use Zero Lag", group = "Trend Settings")
showtrend           = input(false,          title ="Show Trend Line", group = "Trend Settings")
src                 = close

//-----------------------------------------------------------------------------}
//Risk Settings
//-----------------------------------------------------------------------------{
StdLength           = input.int(25,         title = "Standard Deviation Length", group="Risk Settings")
TargetRisk          = input.float(0.12,     maxval = 1, step = 0.01, title = 'Target Risk (%)', group="Risk Settings")
CarryProp           = input.float(0.5,      maxval = 1, step = 0.1, title = 'Carry Trade Proportion (%)', group="Risk Settings")
DeviationPer        = input.float(0.2,      maxval = 1, step = 0.1, title = 'Momentum Change Limit (%)', group="Risk Settings")
EarlyEntry          = input(true,           title="Early Entry (For Stock Only)", group="Risk Settings")
SimpleRisk          = input(false,          title="Simple Risk Calculation", group="Risk Settings")
MarginCal           = input(false,          title="Margin Account", group="Risk Settings")

//-----------------------------------------------------------------------------}
//Global Asset Settings
//-----------------------------------------------------------------------------{
MainAsset           = input.symbol(title = "Primary Source", defval="S5TH", group = "Asset Sources", inline = "source")
CLOSE               = request.security(MainAsset, "1D", close)

//-----------------------------------------------------------------------------}
//EMA Calculation
//-----------------------------------------------------------------------------{
//Fast EMA
lsmaR4              = ta.ema(src, length4)
lsmaR4S             = ta.ema(lsmaR4, length4)
eq4                 = lsmaR4 - lsmaR4S
zlema4              = zerolag ? lsmaR4 + eq4 : ta.ema(src, length4)

lsmaR4A             = ta.ema(src, (length4*4))
lsmaR4SA            = ta.ema(lsmaR4A, (length4*4))
eq4A                = lsmaR4A - lsmaR4SA
zlema4A             = zerolag ? lsmaR4A + eq4A : ta.ema(src, (length4*4))

//Medium EMA
lsmaR5              = ta.ema(src, length5)
lsmaR5S             = ta.ema(lsmaR5, length5)
eq5                 = lsmaR5 - lsmaR5S
zlema5              = zerolag ? lsmaR5 + eq5 : ta.ema(src, length5)

lsmaR5A             = ta.ema(src, (length5*4))
lsmaR5SA            = ta.ema(lsmaR5A, (length5*4))
eq5A                = lsmaR5A - lsmaR5SA
zlema5A             = zerolag ? lsmaR5A + eq5A : ta.ema(src, (length5*4))

//Slow EMA
lsmaR6              = ta.ema(src, length6)
lsmaR6S             = ta.ema(lsmaR6, length6)
eq6                 = lsmaR6 - lsmaR6S
zlema6              = zerolag ? lsmaR6 + eq6 : ta.ema(src, length6)

lsmaR6A             = ta.ema(src, (length6*4))
lsmaR6SA            = ta.ema(lsmaR6A, (length6*4))
eq6A                = lsmaR6A - lsmaR6SA
zlema6A             = zerolag ? lsmaR6A + eq6A : ta.ema(src, (length6*4))

//-----------------------------------------------------------------------------}
//Trend Filter
//-----------------------------------------------------------------------------{
Trenddiff           = zlema6 - zlema6A
Bullish             = Trenddiff[0] > Trenddiff[1] and Trenddiff >= 0
Bearish             = Trenddiff[0] < Trenddiff[1] and Trenddiff < 0
SemiBull            = Trenddiff[0] < Trenddiff[1] and Trenddiff >= 0
SemiBear            = Trenddiff[0] > Trenddiff[1] and Trenddiff < 0

//-----------------------------------------------------------------------------}
//Individual Asset Calculation
//-----------------------------------------------------------------------------{
var float CappedForc        = na
var float CappedForc4       = na
var float CappedForc5       = na
var float CappedForc6       = na

//Instrument Calculation
//-----------------------------------------------------------------------------{
PercentChange               = array.new_float(0)
AdjustedLength              = StdLength - 1

// Loop through the last closing prices and add them to the array
for i = 0 to AdjustedLength
    array.push(PercentChange, ((close[i]-close[i+1])/close[i+1]))

// Calculate the standard deviation of the percent change
DailyPVol                   = math.round(array.stdev(PercentChange, false), 6)
InstRisk                    = math.round((DailyPVol * 16), 6)

//Fast Forecast
//-----------------------------------------------------------------------------{
RiskAdj4                    = (zlema4 - zlema4A) / DailyPVol
ScaledForc4                 = RiskAdj4 * 4.1

if ScaledForc4 <= -20
    CappedForc4             := -20
else if ScaledForc4 > -20 and ScaledForc4 < 20
    CappedForc4             := ScaledForc4
else if ScaledForc4 >= 20
    CappedForc4             := 20  

//Medium Forecast
//-----------------------------------------------------------------------------{
RiskAdj5                    = (zlema5 - zlema5A) / DailyPVol
ScaledForc5                 = RiskAdj5 * 2.79

if ScaledForc5 <= -20
    CappedForc5             := -20
else if ScaledForc5 > -20 and ScaledForc5 < 20
    CappedForc5             := ScaledForc5
else if ScaledForc5 >= 20
    CappedForc5             := 20 

//Slow Forecast
//-----------------------------------------------------------------------------{
RiskAdj6                    = (zlema6 - zlema6A) / DailyPVol
ScaledForc6                 = RiskAdj6 * 1.91

if ScaledForc6 <= -20
    CappedForc6             := -20
else if ScaledForc6 > -20 and ScaledForc6 < 20
    CappedForc6             := ScaledForc6
else if ScaledForc6 >= 20
    CappedForc6             := 20 

//Forecast Combination
//-----------------------------------------------------------------------------{
ComCappedForc               = (CappedForc4 + CappedForc5 + CappedForc6)/3

if ComCappedForc <= -20
    CappedForc              := -20
else if ComCappedForc > -20 and ComCappedForc < 20
    CappedForc              := ComCappedForc
else if ComCappedForc >= 20
    CappedForc              := 20 

//-----------------------------------------------------------------------------}
//Entry Exit Signal
//-----------------------------------------------------------------------------{
var OpenTrade               = false
var OpenEarlyTrade          = false

EarlyBuy                    = EarlyEntry ? ta.crossover(CLOSE,20) and OpenEarlyTrade == false : na
Buy                         = ta.crossover(zlema6, zlema6A)
ExitBuy                     = ta.crossunder(zlema6, zlema6A)

//-----------------------------------------------------------------------------}
//Notional Exposure & Risk-Adjusted Position
//-----------------------------------------------------------------------------{
SensitiveRiskFactor         = MarginCal ? (CappedForc * (1 - CarryProp) / 10) + CarryProp : (CappedForc * (1 - CarryProp) / 20) + CarryProp
SimpleRiskFactor            = MarginCal ? (CappedForc6 * (1 - CarryProp) / 10) + CarryProp : (CappedForc6 * (1 - CarryProp) / 20) + CarryProp

OptimalSizing               = SimpleRisk ? (SimpleRiskFactor * strategy.equity * TargetRisk) / (InstRisk * close) : (SensitiveRiskFactor * strategy.equity * TargetRisk) / (InstRisk * close)
OptimalPosition             = math.round(OptimalSizing, 0)

//Buffer Zone
//-----------------------------------------------------------------------------{
BufferWidth                 = (DeviationPer * strategy.equity * TargetRisk) / (InstRisk * close)
LowerBuffer                 = math.round(OptimalPosition - BufferWidth, 0)
UpperBuffer                 = math.round(OptimalPosition + BufferWidth, 0)

CurrentSize                 = strategy.position_size

//Position Adjustment Signal & Position
//-----------------------------------------------------------------------------{
AdjustBuy                   = MarginCal ? ta.crossunder(CurrentSize, LowerBuffer) and Trenddiff > 0 : ta.crossunder(CurrentSize, LowerBuffer) and strategy.equity > (OptimalPosition * close) and Trenddiff > 0
AdjustSell                  = ta.crossover(CurrentSize, UpperBuffer)

RecSize                     = math.round(OptimalPosition - strategy.position_size, 0)
if RecSize <= 0
    RecSize                 := 0

//Current Proportion
//-----------------------------------------------------------------------------{
var float CurrentProportion1 = 0

CurrentHoldingValue         = strategy.position_size * close
CurrentProportion           = CurrentHoldingValue / strategy.equity

if CurrentProportion >= 1 and MarginCal == true
    CurrentProportion       := CurrentProportion
else if CurrentProportion >= 1 and MarginCal == false
    CurrentProportion       := 1

//-----------------------------------------------------------------------------}
//Strategy
//-----------------------------------------------------------------------------{
//Carry Buy Condition
//-----------------------------------------------------------------------------{  
if EarlyBuy
    strategy.entry("L", strategy.long, qty = RecSize)
else if Buy
    strategy.entry("L", strategy.long, qty = RecSize)
else if AdjustBuy
    strategy.entry("L", strategy.long, qty = (UpperBuffer - CurrentSize))
else if AdjustSell
    strategy.close("L", qty = (CurrentSize - UpperBuffer))
else if ExitBuy
    strategy.close("L", qty_percent = (1 - CarryProp) * 100)

// Calculate net profit and percentage profitable
//-----------------------------------------------------------------------------{ 
net_profit          = strategy.netprofit
percent_profitable  = math.round(strategy.wintrades / (strategy.wintrades + strategy.losstrades), 2)

//Table Styling
//-----------------------------------------------------------------------------{ 
bgMColour           = color.rgb(0, 0, 0, 30)
bgSColour           = color.rgb(0, 0, 0, 20)
    
if net_profit > 0
    bgMColour       := color.rgb(8, 153, 129)
    bgSColour       := color.rgb(8, 153, 129, 20)
else
    bgMColour       := color.rgb(242, 54, 69)
    bgSColour       := color.rgb(242, 54, 69, 20)
    
//-----------------------------------------------------------------------------}
//Summary Table
//-----------------------------------------------------------------------------{ 
table_data          = table.new(position = position.top_right, columns = 1, rows = 4, bgcolor = color.rgb(0, 0, 0, 100), frame_width = 1, border_width = 1)

table.cell(table_data, 0, 0, 'CM782', bgcolor = color.rgb(255, 255, 255, 70), text_size = size.normal, text_color = color.rgb(255, 255, 255))   
table.cell(table_data, 0, 1, str.tostring("$" + str.tostring(math.round(net_profit,0))), text_size = size.normal, bgcolor = bgMColour, text_color = color.rgb(255, 255, 255), text_halign  = text.align_center, tooltip = "Net Profit")
table.cell(table_data, 0, 2, str.tostring(str.tostring(math.round(percent_profitable * 100,0)) + "%"), text_size = size.normal, bgcolor = bgSColour, text_color = color.rgb(255, 255, 255), text_halign  = text.align_center, tooltip = "Percent Profitable")
table.cell(table_data, 0, 3, str.tostring(str.tostring(math.round(CurrentProportion * 100,0)) + "%"), bgcolor = color.rgb(255, 255, 255, 85), text_size = size.normal, text_color = color.rgb(255, 255, 255), tooltip = "Sensitive Risk")

//-----------------------------------------------------------------------------}
//Entry & Exit Signal
//-----------------------------------------------------------------------------{
plotshape(Buy, title='Buy', text = "▲", textcolor = color.white, style=shape.labelup, location=location.belowbar, color=color.rgb(8, 153, 129), size=size.tiny)
plotshape(ExitBuy, title='Exit Buy', text = "✘", textcolor = color.white, style=shape.labeldown, location=location.abovebar, color=color.rgb(242, 54, 69), size=size.tiny)

plotshape(AdjustBuy, title='Adjust Buy', text = "△", textcolor = color.white, style=shape.labelup, location=location.belowbar, color=color.rgb(8, 153, 129, 50), size=size.tiny)
plotshape(AdjustSell, title='Adjust Sell', text = "✘", textcolor = color.white, style=shape.labeldown, location=location.abovebar, color=color.rgb(242, 54, 69, 50), size=size.tiny)

plotshape(EarlyBuy ? CLOSE : na, text = "●", textcolor = color.white, style=shape.labelup, location=location.belowbar, color=color.rgb(8, 153, 129, 70), size=size.tiny)

//-----------------------------------------------------------------------------}
//Bar & Trend Line Colours
//-----------------------------------------------------------------------------{
NeutralColor        = #56328f
BearColor           = color.rgb(242, 54, 69)
SemiBearColor       = color.rgb(242, 54, 69, 50)
BullColor           = color.rgb(8, 153, 129)
SemiBullColor       = color.rgb(8, 153, 129, 50)

//Style
var col             = color.rgb(120, 123, 134, 100)
var fillG           = color.rgb(120, 123, 134, 100)

if Trenddiff[0] > Trenddiff[1] and Trenddiff >= 0 and showtrend == true
    col             := BullColor
    fillG           := color.rgb(8, 153, 129, 85)
else if Trenddiff[0] < Trenddiff[1] and Trenddiff >= 0 and showtrend == true
    col             := BullColor
    fillG           := color.rgb(8, 153, 129, 95)
else if Trenddiff[0] < Trenddiff[1] and Trenddiff < 0 and showtrend == true
    col             := BearColor
    fillG           := color.rgb(242, 54, 70, 85)
else if Trenddiff[0] > Trenddiff[1] and Trenddiff < 0 and showtrend == true
    col             := BearColor
    fillG           := color.rgb(242, 54, 70, 95)
else
    col             := color.rgb(120, 123, 134, 100)
    fillG           := color.rgb(120, 123, 134, 100)

barcolor(Bullish ? BullColor : Bearish ? BearColor : SemiBull ? SemiBullColor : SemiBear ? SemiBearColor : NeutralColor)

plotFast            = plot(zlema6, color=col, linewidth=1) 
plotSlow            = plot(zlema6A, color=col, linewidth=1)

fill(plotFast, plotSlow, color = fillG, fillgaps = true) 

//-----------------------------------------------------------------------------}
//Alert
//-----------------------------------------------------------------------------{
if Buy
    alert("Buy", alert.freq_once_per_bar_close)
else if EarlyBuy
    alert("Early Buy", alert.freq_once_per_bar_close)
else if ExitBuy
    alert("Exit Buy", alert.freq_once_per_bar_close)
else if AdjustBuy or AdjustSell
    alert("Position Adjusted", alert.freq_once_per_bar_close)

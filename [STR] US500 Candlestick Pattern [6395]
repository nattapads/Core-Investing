//NSal
//@version=5
strategy("[STR] US500 Candlestick Pattern [6395]", overlay = true, margin_long = 100, margin_short = 100, pyramiding = 3, risk_free_rate = 0)

//------------------------------------------------------------------------------
//Strategy Settings
//-----------------------------------------------------------------------------{
startTime               = input.time(timestamp("Feb 01 2018 00:00:00"), title="Start Time")
inTimeWindow            = time >= startTime

//-----------------------------------------------------------------------------}
//Stochastic Settings
//-----------------------------------------------------------------------------{
enableStochastic        = input(true,           'Enable Stochastic',    group="Stochastic Settings")
periodK                 = input.int(14,         '%K Length',            minval=1, group="Stochastic Settings")
smoothK                 = input.int(3,          '%K Smoothing',         minval=1, group="Stochastic Settings")
periodD                 = input.int(3,          '%D Smoothing',         minval=1, group="Stochastic Settings")
stocBuyTh               = input.int(25,         'Buy Threshold',        minval=1, group="Stochastic Settings")
stocSellTh              = input.int(75,         'Sell Threshold',       minval=1, group="Stochastic Settings")

//-----------------------------------------------------------------------------}
//Engulfing Settings
//-----------------------------------------------------------------------------{
enableEngulfting        = input(true,           'Enable Engulfing',     group="Engulfing Settings")

//-----------------------------------------------------------------------------}
//Morning & Evening Settings
//-----------------------------------------------------------------------------{
enableStar              = input(true,           'Enable Morning & Evening Star',    group="Morning & Evening Settings")
emaStarLength           = input.int(5,          'EMA Morning & Evening Star',       minval=5, maxval=50, group="Morning & Evening Settings")

//-----------------------------------------------------------------------------}
//Harami Settings
//-----------------------------------------------------------------------------{
enableHarami            = input(true,           'Enable Harami',        group="Harami Settings")

//-----------------------------------------------------------------------------}
//Tweezer and Kangaroo Tail Settings
//-----------------------------------------------------------------------------{
enableTweezer           = input(true,           'Enable Tweezer',                   group="Tweezer and Kangaroo Tail Settings")
maxRate                 = input(150.,           'Max Rate % Between Wick Sizes',    group="Tweezer and Kangaroo Tail Settings") / 100.
levelDiff               = input(20.,            'Max Difference in level %',        group="Tweezer and Kangaroo Tail Settings") / 100.
prdHighLow              = input(5,              'Highest/Lowest Period',            group="Tweezer and Kangaroo Tail Settings")
maxDicannce             = input.int(12,         'Max Dicannce between Tweezers',    minval=1, group="Tweezer and Kangaroo Tail Settings")

//-----------------------------------------------------------------------------}
//EMA Settings
//-----------------------------------------------------------------------------{
emaFastLength           = input(20,             'Fast SMA Length',      group="EMA Settings")
emaFastSrc              = close
emaSlowLength           = input(50,             'Slow SMA Length',      group="EMA Settings")
emaSlowSrc              = close

//-----------------------------------------------------------------------------}
//ATR Settings
//-----------------------------------------------------------------------------{
atrLength               = input(14,             'ATR Length',           group="ATR Settings")
atrMultiplier           = input(3.10,           'Multiplier',           group="ATR Settings")
atrReward               = input(1.50,           'Reward Multiplier',    group="ATR Settings")
atrLoss                 = input(1.00,           'Loss Multiplier',      group="ATR Settings")
slippageBuffer          = input(0.5,            'slippageBuffer',       group="ATR Settings")
atrOutput               = ta.atr(atrLength)*atrMultiplier

//-----------------------------------------------------------------------------{
//Structure Settings
//-----------------------------------------------------------------------------{
strSwingLength          = input(50,             'Swing Length', group = 'Smart Money Concepts')
strConfluence           = false
strLength               = 50

//------------------------------------------------------------------------------
//Session Settings
//-----------------------------------------------------------------------------{
sesUsTxt                = input('New York', '',             inline = 'sesa', group = 'Session Settings')
sesUsPeriod             = input.session('1300-1900', '',    inline = 'sesa', group = 'Session Settings')

sesEuTxt                = input('London', '',               inline = 'sesb', group = 'Session Settings')
sesEuPeriod             = input.session('0000-1600', '',    inline = 'sesb', group = 'Session Settings')

sesUTC                  = input.int(0, 'UTC (+/-)',             group = 'Session Settings')
sesUseExchange          = input(false, 'Use Exchange Timezone', group = 'Session Settings')

//-----------------------------------------------------------------------------}
//Stochastic Calculation
//-----------------------------------------------------------------------------{
stochasticK             = ta.sma(ta.stoch(close, high, low, periodK), smoothK)

//-----------------------------------------------------------------------------}
//EMA Calculation
//-----------------------------------------------------------------------------{
trendFast               = ta.sma(emaFastSrc, emaFastLength)
trendSlow               = ta.sma(emaSlowSrc, emaSlowLength)

//-----------------------------------------------------------------------------}
//Engulfing Candle Calculation
//-----------------------------------------------------------------------------{
openBarPrevious         = open[1]
closeBarPrevious        = close[1]
openBarCurrent          = open
closeBarCurrent         = close

bullishEngulfing        = openBarCurrent <= closeBarPrevious and openBarCurrent < openBarPrevious and closeBarCurrent > openBarPrevious
bearishEngulfing        = openBarCurrent >= closeBarPrevious and openBarCurrent > openBarPrevious and closeBarCurrent < openBarPrevious

//-----------------------------------------------------------------------------}
//Morning & Evening Calculation
//-----------------------------------------------------------------------------{
emaStar                 = ta.ema(close, emaStarLength)
openCloseMin            = math.min(close, open)
openCloseMax            = math.max(close, open)
prevBar0                = openCloseMax - openCloseMin
prevClose1              = close[1]
prevOpen1               = open[1]
openCloseMin1           = math.min(close[1], open[1])
openCloseMax1           = math.max(close[1], open[1])
prevBar1                = openCloseMax1 - openCloseMin1
prevClose2              = close[2]
prevOpen2               = open[2]
openCloseMin2           = math.min(close[2], open[2])
openCloseMax2           = math.max(close[2], open[2])
prevBar2                = openCloseMax2 - openCloseMin2
prevClose3              = close[3]

bodyTop                 = math.max(close[1], open[1])
bodyLow                 = math.min(close[1], open[1])

morningStar             = if prevBar0 > prevBar1 and prevBar2 > prevBar1 and prevBar0 > prevBar2 * 0.5 and openCloseMin2 > openCloseMin1 and openCloseMin > openCloseMin1 and emaStar > prevClose2 and emaStar > prevClose1 and close > prevClose1 and prevClose3 > prevClose2 and prevClose2 > prevClose1 and close > bodyTop and prevClose2 != prevClose1 and open != close and prevOpen2 != prevClose2
    true

eveningStar             = if prevBar0 > prevBar1 and prevBar2 > prevBar1 and prevBar0 > prevBar2 * 0.5 and openCloseMax2 < openCloseMax1 and openCloseMax < openCloseMax1 and emaStar < prevClose2 and emaStar < prevClose1 and close < prevClose1 and prevClose3 < prevClose2 and prevClose2 < prevClose1 and close < bodyLow and prevClose2 != prevClose1 and open != close and prevOpen2 != prevClose2
    true

//-----------------------------------------------------------------------------}
//Harami Calculation
//-----------------------------------------------------------------------------{
bullishHarami           = close[0] > open[0] and high[0] <= open[1] and low[0] >= close[1] and close[1] < open[1]
bearishHarami           = close[0] < open[0] and high[0] <= close[1] and low[0] >= open[1] and close[1] > open[1]

//-----------------------------------------------------------------------------}
//Tweezer and Kangaroo Tail Calculation
//-----------------------------------------------------------------------------{
topWick                 = high - math.max(close, open)
bottomWick              = math.min(close, open) - low
isHighestBar            = ta.highestbars(prdHighLow) == 0
isLowestBar             = ta.lowestbars(prdHighLow) == 0
aparttweezers_top(len) =>
    ret         = 0
    if topWick > 0
        for x = 1 to maxDicannce by 1
            if nz(topWick[x]) == 0
                break
            if math.max(topWick, topWick[x]) / math.min(topWick, topWick[x]) <= maxRate and math.abs(high - high[x]) < math.max(topWick, topWick[x]) * levelDiff and isHighestBar[x]
                ret := x
                break
            else
                if high[x] >= high
                    ret := 0
                    break
    ret

aparttweezers_bottom(len) =>
    ret         = 0
    if bottomWick > 0
        for x = 1 to maxDicannce by 1
            if nz(bottomWick[x]) == 0
                break
            if math.max(bottomWick, bottomWick[x]) / math.min(bottomWick, bottomWick[x]) <= maxRate and math.abs(low - low[x]) < math.max(bottomWick, bottomWick[x]) * levelDiff and isLowestBar[x]
                ret := x
                break
            else
                if low[x] <= low
                    ret := 0
                    break
    ret

topTweezer              = enableTweezer and aparttweezers_top(maxDicannce)
bottomTweezer           = enableTweezer and aparttweezers_bottom(maxDicannce)

//-----------------------------------------------------------------------------}
//Sessions
//-----------------------------------------------------------------------------{
tf                      = timeframe.period

var tz                  = sesUseExchange ? syminfo.timezone :
  str.format('UTC{0}{1}', sesUTC >= 0 ? '+' : '-', math.abs(sesUTC))

isUsSession             = math.sign(nz(time(tf, sesUsPeriod, tz)))
isEuSession             = math.sign(nz(time(tf, sesEuPeriod, tz)))

isTradingSession        = isUsSession + isEuSession

//-----------------------------------------------------------------------------}
//Structure Functions
//-----------------------------------------------------------------------------{
n                       = bar_index
atr                     = ta.atr(200)
cmean_range             = ta.cum(high - low) / n

//HL Output function
hl() => [high, low]

//Get ohlc values function
get_ohlc() => [close[1], open[1], high, low, high[2], low[2]]

//Swings detection/measurements
swings(len)=>
    var os              = 0
    
    upper               = ta.highest(len)
    lower               = ta.lowest(len)

    os                  := high[len] > upper ? 0 : low[len] < lower ? 1 : os[1]

    top                 = os == 0 and os[1] != 0 ? high[len] : 0
    btm                 = os == 1 and os[1] != 1 ? low[len] : 0

    [top, btm]

//-----------------------------------------------------------------------------}
//Structure variables
//-----------------------------------------------------------------------------{
var trend               = 0, var intTrend = 0

var top_y               = 0., var top_x = 0
var btm_y               = 0., var btm_x = 0

var itop_y              = 0., var itop_x = 0
var ibtm_y              = 0., var ibtm_x = 0

var trail_up            = high, var trail_dn = low
var trail_up_x          = 0,  var trail_dn_x = 0

var top_cross           = true,  var btm_cross = true
var itop_cross          = true, var ibtm_cross = true

//Swings
[top, btm]              = swings(strLength)
[itop, ibtm]            = swings(strSwingLength)

//-----------------------------------------------------------------------------}
//Structure Pivot High
//-----------------------------------------------------------------------------{
var line extend_top     = na

if top
    top_cross           := true

if itop
    itop_cross          := true

    itop_y              := itop
    itop_x              := n - 5

//Trailing maximum
trail_up                := math.max(high, trail_up)
trail_up_x              := trail_up == high ? n : trail_up_x

//-----------------------------------------------------------------------------}
//Structure Pivot Low
//-----------------------------------------------------------------------------{
var line extend_btm     = na 

if btm
    btm_cross           := true

if ibtm
    ibtm_cross          := true

    ibtm_y              := ibtm
    ibtm_x              := n - 5

//Trailing minimum
trail_dn                := math.min(low, trail_dn)
trail_dn_x              := trail_dn == low ? n : trail_dn_x

//-----------------------------------------------------------------------------}
//Structure Pivot High BOS/CHoCH
//-----------------------------------------------------------------------------{
//Filtering
var bull_concordant     = true

if strConfluence
    bull_concordant     := high - math.max(close, open) > math.min(close, open - low)

//Detect internal bullish Structure
if ta.crossover(close, itop_y) and itop_cross and top_y != itop_y and bull_concordant
    bool choch          = na
    
    if intTrend < 0
        choch           := true
    
    itop_cross          := false
    intTrend            := 1

//-----------------------------------------------------------------------------}
//Structure Pivot Low BOS/CHoCH
//-----------------------------------------------------------------------------{
var bear_concordant     = true

if strConfluence
    bear_concordant     := high - math.max(close, open) < math.min(close, open - low)

//Detect internal bearish Structure
if ta.crossunder(close, ibtm_y) and ibtm_cross and btm_y != ibtm_y and bear_concordant
    bool choch          = false
    
    if intTrend > 0
        choch           := true
    
    ibtm_cross          := false
    intTrend            := -1

//-----------------------------------------------------------------------------}
//Trend Calculation
//-----------------------------------------------------------------------------{ 
var trendUp             = false

if trendFast[0] > trendFast[1]
    trendUp             := true
else if trendSlow[0] < trendSlow[1]
    trendUp             := false

//-----------------------------------------------------------------------------}
//Bar Colour
//-----------------------------------------------------------------------------{
var color trendColour   = na
var bullColour          = #089981
var bearColour          = #f23645

if intTrend == 1 and trendUp == true and isTradingSession
    trendColour         :=  bullColour
else if intTrend != 1 and trendUp == false and isTradingSession
    trendColour         :=  bearColour
else if intTrend == 1 and trendUp == false and isTradingSession
    trendColour         :=  color.rgb(8, 153, 129, 50)
else if intTrend != 1 and trendUp == true and isTradingSession
    trendColour         :=  color.rgb(242, 54, 70, 50)
else
    trendColour         := color.rgb(120, 123, 134, 65)

barcolor(trendColour)

//-----------------------------------------------------------------------------}
//Entry Exit Signal
//-----------------------------------------------------------------------------{
var stoOpenTrade        = false

stoBuy                  = trendFast > trendSlow and ta.crossover(stochasticK, stocBuyTh) and enableStochastic and trendUp == true and intTrend == 1 and isTradingSession and stoOpenTrade == false and atrOutput > 0 
stoSell                 = trendFast < trendSlow and ta.crossunder(stochasticK, stocSellTh) and enableStochastic and trendUp == false and intTrend != 1 and isTradingSession and stoOpenTrade == false and atrOutput > 0

var engOpenTrade        = false

engBuy                  = trendFast > trendSlow and enableEngulfting and bullishEngulfing and trendUp == true and intTrend == 1 and isTradingSession and engOpenTrade == false and atrOutput > 0
engSell                 = trendFast < trendSlow and enableEngulfting and bearishEngulfing and trendUp == false and intTrend != 1 and isTradingSession and engOpenTrade == false and atrOutput > 0

var canOpenTrade        = false

canBuy                  = (trendFast > trendSlow and enableStar and morningStar and trendUp == true and intTrend == 1 and isTradingSession and canOpenTrade == false and atrOutput > 0) or (trendFast > trendSlow and enableHarami and bullishHarami and trendUp == true and intTrend == 1 and isTradingSession and canOpenTrade == false and atrOutput > 0) or (trendFast > trendSlow and bottomTweezer and trendUp == true and intTrend == 1 and isTradingSession and canOpenTrade == false and atrOutput > 0)
canSell                 = (trendFast < trendSlow and enableStar and eveningStar and trendUp == false and intTrend != 1 and isTradingSession and canOpenTrade == false and atrOutput > 0) or (trendFast < trendSlow and enableHarami and bearishHarami and trendUp == false and intTrend != 1 and isTradingSession and canOpenTrade == false and atrOutput > 0) or trendFast < trendSlow and topTweezer and trendUp == false and intTrend != 1 and isTradingSession and canOpenTrade == false and atrOutput > 0

//-----------------------------------------------------------------------------}
//Take Profit & Stop Loss
//-----------------------------------------------------------------------------{ 
stoTpBuy                = stoBuy ? close + (atrOutput*atrReward) : na
stoSlBuy                = stoBuy ? low - (atrOutput*atrLoss) : na
stoTpSell               = stoSell ? close - (atrOutput*atrReward) : na 
stoSlSell               = stoSell ? high + (atrOutput*atrLoss) : na  

engTpBuy                = engBuy ? close + (atrOutput*atrReward) : na
engSlBuy                = engBuy ? low - (atrOutput*atrLoss) : na
engTpSell               = engSell ? close - (atrOutput*atrReward) : na 
engSlSell               = engSell ? high + (atrOutput*atrLoss) : na 

canTpBuy                = canBuy ? close + (atrOutput*atrReward) : na
canSlBuy                = canBuy ? low - (atrOutput*atrLoss) : na
canTpSell               = canSell ? close - (atrOutput*atrReward) : na 
canSlSell               = canSell ? high + (atrOutput*atrLoss) : na 

//-----------------------------------------------------------------------------}
//Lot Settings
//-----------------------------------------------------------------------------{ 
initialLot                  = input.float(0.1,      "Initial Lot",          minval=0.1, step=0.1, group = 'Account & Trade')
drawDown                    = input.float(1.5,      "Drawdown Multiplier",  minval=0.1, step=0.1, group = 'Account & Trade')

// Calculate diff and recommended lot size for different risk percentages
var float stoCalTakePofit   = 0
var float stoCalStopLoss    = 0
var float engCalTakePofit   = 0
var float engCalStopLoss    = 0
var float canCalTakePofit   = 0
var float canCalcanpLoss    = 0

// Recent Loss
var stoRecLot               = math.round(initialLot,1)
var engRecLot               = math.round(initialLot,1)
var canRecLot               = math.round(initialLot,1)

// Update TP & SL
if stoBuy and stoOpenTrade == false
    stoCalTakePofit         := math.round((stoTpBuy + slippageBuffer),2)
    stoCalStopLoss          := math.round((stoSlBuy + slippageBuffer),2)
    stoOpenTrade            := true
else if stoSell and stoOpenTrade == false
    stoCalTakePofit         := math.round((stoTpSell - slippageBuffer),2)
    stoCalStopLoss          := math.round((stoSlSell - slippageBuffer),2)
    stoOpenTrade            := true
else if engBuy and engOpenTrade == false
    engCalTakePofit         := math.round((engTpBuy + slippageBuffer),2)
    engCalStopLoss          := math.round((engSlBuy + slippageBuffer),2)
    engOpenTrade            := true
else if engSell and engOpenTrade == false
    engCalTakePofit         := math.round((engTpSell - slippageBuffer),2)
    engCalStopLoss          := math.round((engSlSell - slippageBuffer),2)
    engOpenTrade            := true
else if canBuy and canOpenTrade == false
    canCalTakePofit         := math.round((canTpBuy + slippageBuffer),2)
    canCalcanpLoss          := math.round((canSlBuy + slippageBuffer),2)
    canOpenTrade            := true
else if canSell and canOpenTrade == false
    canCalTakePofit         := math.round((canTpSell - slippageBuffer),2)
    canCalcanpLoss          := math.round((canSlSell - slippageBuffer),2)
    canOpenTrade            := true

// Reach SL
if stoCalTakePofit > stoCalStopLoss and ta.crossunder(low, stoCalStopLoss) and stoOpenTrade == true
    stoOpenTrade            := false
    stoRecLot               := math.round(stoRecLot * drawDown,1)
else if stoCalTakePofit < stoCalStopLoss and ta.crossover(high, stoCalStopLoss) and stoOpenTrade == true
    stoOpenTrade            := false
    stoRecLot               := math.round(stoRecLot * drawDown,1)
else if stoCalTakePofit > stoCalStopLoss and ta.crossover(high, stoCalTakePofit) and stoOpenTrade == true
    stoOpenTrade            := false
    stoRecLot               := math.round(initialLot,1)
else if stoCalTakePofit < stoCalStopLoss and ta.crossunder(low, stoCalTakePofit) and stoOpenTrade == true
    stoOpenTrade            := false
    stoRecLot               := math.round(initialLot,1)
else if engCalTakePofit > engCalStopLoss and ta.crossunder(low, engCalStopLoss) and engOpenTrade == true
    engOpenTrade            := false
    engRecLot               := math.round(engRecLot * drawDown,1)
else if engCalTakePofit < engCalStopLoss and ta.crossover(high, engCalStopLoss) and engOpenTrade == true
    engOpenTrade            := false
    engRecLot               := math.round(engRecLot * drawDown,1)
else if engCalTakePofit > engCalStopLoss and ta.crossover(high, engCalTakePofit) and engOpenTrade == true
    engOpenTrade            := false
    engRecLot               := math.round(initialLot,1)
else if engCalTakePofit < engCalStopLoss and ta.crossunder(low, engCalTakePofit) and engOpenTrade == true
    engOpenTrade            := false
    engRecLot               := math.round(initialLot,1)
else if canCalTakePofit > canCalcanpLoss and ta.crossunder(low, canCalcanpLoss) and canOpenTrade == true
    canOpenTrade            := false
    canRecLot               := math.round(canRecLot * drawDown,1)
else if canCalTakePofit < canCalcanpLoss and ta.crossover(high, canCalcanpLoss) and canOpenTrade == true
    canOpenTrade            := false
    canRecLot               := math.round(canRecLot * drawDown,1)
else if canCalTakePofit > canCalcanpLoss and ta.crossover(high, canCalTakePofit) and canOpenTrade == true
    canOpenTrade            := false
    canRecLot               := math.round(initialLot,1)
else if canCalTakePofit < canCalcanpLoss and ta.crossunder(low, canCalTakePofit) and canOpenTrade == true
    canOpenTrade            := false
    canRecLot               := math.round(initialLot,1)

//-----------------------------------------------------------------------------}
//TP & SL Plot
//-----------------------------------------------------------------------------{
showTpSl                    = input(true, "Show TP/SL",     group = "ATR Settings")
slColour                    = showTpSl ? color.rgb(242, 54, 70) : color.rgb(242, 54, 70, 100)
tpColour                    = showTpSl ? color.rgb(8, 153, 129) : color.rgb(8, 153, 129, 100)

//-----------------------------------------------------------------------------}
//Plot
//-----------------------------------------------------------------------------{
plotshape(stoBuy, title='Buy', text="S▲", textcolor = color.white, style=shape.labelup, location=location.belowbar, color=color.rgb(8, 153, 129, 70), size=size.tiny)
plotshape(stoSell, title='Sell', text="S▼", textcolor = color.white, style=shape.labeldown, location=location.abovebar, color=color.rgb(242, 54, 70, 70), size=size.tiny)

plot(stoSlBuy, color=slColour, title='Buy Stop Loss', linewidth=2, style=plot.style_cross)
plot(stoTpBuy, color=tpColour, title='Buy Take Profit', linewidth=2, style=plot.style_cross)

plot(stoSlSell, color=slColour, title='Sell Stop Loss', linewidth=2, style=plot.style_cross)
plot(stoTpSell, color=tpColour, title='Sell Take Profit', linewidth=2, style=plot.style_cross)

plotshape(engBuy, title='Buy', text="E▲", textcolor = color.white, style=shape.labelup, location=location.belowbar, color=color.rgb(8, 153, 129, 70), size=size.tiny)
plotshape(engSell, title='Sell', text="E▼", textcolor = color.white, style=shape.labeldown, location=location.abovebar, color=color.rgb(242, 54, 70, 70), size=size.tiny)

plot(engSlBuy, color=slColour, title='Buy Stop Loss', linewidth=2, style=plot.style_cross)
plot(engTpBuy, color=tpColour, title='Buy Take Profit', linewidth=2, style=plot.style_cross)

plot(engSlSell, color=slColour, title='Sell Stop Loss', linewidth=2, style=plot.style_cross)
plot(engTpSell, color=tpColour, title='Sell Take Profit', linewidth=2, style=plot.style_cross)

plotshape(canBuy, title='Buy', text="C▲", textcolor = color.white, style=shape.labelup, location=location.belowbar, color=color.rgb(8, 153, 129, 70), size=size.tiny)
plotshape(canSell, title='Sell', text="C▼", textcolor = color.white, style=shape.labeldown, location=location.abovebar, color=color.rgb(242, 54, 70, 70), size=size.tiny)

plot(canSlBuy, color=slColour, title='Buy Stop Loss', linewidth=2, style=plot.style_cross)
plot(canTpBuy, color=tpColour, title='Buy Take Profit', linewidth=2, style=plot.style_cross)

plot(canSlSell, color=slColour, title='Sell Stop Loss', linewidth=2, style=plot.style_cross)
plot(canTpSell, color=tpColour, title='Sell Take Profit', linewidth=2, style=plot.style_cross)

//-----------------------------------------------------------------------------}
//Strategy
//-----------------------------------------------------------------------------{ 
var float stoStopLoss   = na
var float stoTakeProfit = na
var float engStopLoss   = na
var float engTakeProfit = na
var float canStopLoss   = na
var float canTakeProfit = na

if inTimeWindow
    if stoBuy
        stoStopLoss     := low - (atrOutput * atrLoss) + slippageBuffer
        stoTakeProfit   := close + (atrOutput * atrReward) + slippageBuffer
        strategy.entry("stoL", strategy.long, qty = stoRecLot)
        strategy.exit("stoExL", "stoL", stop = stoStopLoss, limit = stoTakeProfit)
    else if stoSell
        stoStopLoss     := high + (atrOutput * atrLoss) - slippageBuffer
        stoTakeProfit   := close - (atrOutput * atrReward) - slippageBuffer
        strategy.entry("stoS", strategy.short, qty = stoRecLot)
        strategy.exit("stoExS", "stoS", stop = stoStopLoss, limit = stoTakeProfit)
    else if engBuy
        engStopLoss     := low - (atrOutput * atrLoss) + slippageBuffer
        engTakeProfit   := close + (atrOutput * atrReward) + slippageBuffer
        strategy.entry("engL", strategy.long, qty = engRecLot)
        strategy.exit("engExL", "engL", stop = engStopLoss, limit = engTakeProfit)
    else if engSell
        engStopLoss     := high + (atrOutput * atrLoss) - slippageBuffer
        engTakeProfit   := close - (atrOutput * atrReward) - slippageBuffer
        strategy.entry("engS", strategy.short, qty = engRecLot)
        strategy.exit("engExS", "engS", stop = engStopLoss, limit = engTakeProfit)
    else if canBuy
        canStopLoss     := low - (atrOutput * atrLoss) + slippageBuffer
        canTakeProfit   := close + (atrOutput * atrReward) + slippageBuffer
        strategy.entry("canL", strategy.long, qty = canRecLot)
        strategy.exit("canExL", "canL", stop = canStopLoss, limit = canTakeProfit)
    else if canSell
        canStopLoss     := high + (atrOutput * atrLoss) - slippageBuffer
        canTakeProfit   := close - (atrOutput * atrReward) - slippageBuffer
        strategy.entry("canS", strategy.short, qty = canRecLot)
        strategy.exit("canExS", "canS", stop = canStopLoss, limit = canTakeProfit)
    
// Calculate net profit and percentage profitable
strNetProfit            = strategy.netprofit
strPercentProfitable    = math.round(strategy.wintrades / (strategy.wintrades + strategy.losstrades), 2)
strProfitFactor         = strategy.grossprofit / strategy.grossloss
    
bgDarkColour            = color.rgb(0, 0, 0, 30)
bgLightColour            = color.rgb(0, 0, 0, 20)
    
if strNetProfit > 0
    bgDarkColour        := color.rgb(8, 153, 129)
    bgLightColour        := color.rgb(8, 153, 129, 20)
else
    bgDarkColour        := color.rgb(242, 54, 69)
    bgLightColour        := color.rgb(242, 54, 69, 20)

stoPositionBg           = color.rgb(255, 255, 255, 90)
engPositionBg           = color.rgb(255, 255, 255, 90)
canPositionBg           = color.rgb(255, 255, 255, 90)

if stoOpenTrade == true
    stoPositionBg       := color.rgb(255, 255, 255, 65)
else
    stoPositionBg       := color.rgb(255, 255, 255, 90)

if engOpenTrade == true
    engPositionBg       := color.rgb(255, 255, 255, 65)
else
    engPositionBg       := color.rgb(255, 255, 255, 90)

if canOpenTrade == true
    canPositionBg       := color.rgb(255, 255, 255, 65)
else
    canPositionBg       := color.rgb(255, 255, 255, 90)

//-----------------------------------------------------------------------------}
//Summary Table
//-----------------------------------------------------------------------------{ 
table_data          = table.new(position = position.bottom_right, columns = 1, rows = 8, bgcolor = color.rgb(0, 0, 0, 100), frame_width = 1, border_width = 1)   
table.cell(table_data, 0, 0, 'CP782', bgcolor = color.rgb(255, 255, 255, 70), text_size = size.normal, text_color = color.rgb(255, 255, 255))
table.cell(table_data, 0, 1, str.tostring("$" + str.tostring(math.round(strNetProfit,0))), text_size = size.normal, bgcolor = bgDarkColour, text_color = color.rgb(255, 255, 255), text_halign  = text.align_center, tooltip = "Net Profit")
table.cell(table_data, 0, 2, str.tostring(str.tostring(math.round(strPercentProfitable * 100,0)) + "%"), text_size = size.normal, bgcolor = bgLightColour, text_color = color.rgb(255, 255, 255), text_halign  = text.align_center, tooltip = "Percent Profitable")
table.cell(table_data, 0, 3, str.tostring((math.round(strProfitFactor,2))), text_size = size.normal, bgcolor = bgDarkColour, text_color = color.rgb(255, 255, 255), text_halign  = text.align_center, tooltip = "Profit Factor")
table.cell(table_data, 0, 4, str.tostring("$" + str.tostring(math.round(strategy.max_drawdown, 0))), text_size = size.normal, bgcolor = color.rgb(242, 54, 69, 30), text_color = color.rgb(255, 255, 255), text_halign  = text.align_center, tooltip = "Max Drawdown")
table.cell(table_data, 0, 5, str.format("{0}", math.abs(stoRecLot)), bgcolor = stoPositionBg, text_size = size.normal, text_color = color.rgb(255, 255, 255), tooltip = "Lot Size")
table.cell(table_data, 0, 6, str.format("{0}", math.abs(engRecLot)), bgcolor = engPositionBg, text_size = size.normal, text_color = color.rgb(255, 255, 255), tooltip = "Lot Size")
table.cell(table_data, 0, 7, str.format("{0}", math.abs(canRecLot)), bgcolor = canPositionBg, text_size = size.normal, text_color = color.rgb(255, 255, 255), tooltip = "Lot Size")

//-----------------------------------------------------------------------------}
//Alert
//-----------------------------------------------------------------------------{
if stoBuy
    alert("US500 Buy lot "+str.tostring(math.round(stoRecLot,1))+" slprice "+str.tostring(math.round(stoSlBuy,1))+", tpprice "+str.tostring(math.round(stoTpBuy,1))+"", alert.freq_once_per_bar_close)
else if stoSell
    alert("US500 Sell lot "+str.tostring(math.round(stoRecLot,1))+" slprice "+str.tostring(math.round(stoSlSell,1))+", tpprice "+str.tostring(math.round(stoTpSell,1))+"", alert.freq_once_per_bar_close)
else if engBuy
    alert("US500 Buy lot "+str.tostring(math.round(engRecLot,1))+" slprice "+str.tostring(math.round(engSlBuy,1))+", tpprice "+str.tostring(math.round(engTpBuy,1))+"", alert.freq_once_per_bar_close)
else if engSell
    alert("US500 Sell lot "+str.tostring(math.round(engRecLot,1))+" slprice "+str.tostring(math.round(engSlSell,1))+", tpprice "+str.tostring(math.round(engTpSell,1))+"", alert.freq_once_per_bar_close)
else if canBuy
    alert("US500 Buy lot "+str.tostring(math.round(canRecLot,1))+" slprice "+str.tostring(math.round(canSlBuy,1))+", tpprice "+str.tostring(math.round(canTpBuy,1))+"", alert.freq_once_per_bar_close)
else if canSell
    alert("US500 Sell lot "+str.tostring(math.round(canRecLot,1))+" slprice "+str.tostring(math.round(canSlSell,1))+", tpprice "+str.tostring(math.round(canTpSell,1))+"", alert.freq_once_per_bar_close)

//NSal
//@version=5
strategy("[STR] Carry & MAC & Mean Reversion [6395]", overlay = true, margin_long = 50, margin_short = 50, pyramiding = 100, initial_capital = 10000, risk_free_rate = 1, commission_value = 0.165)

//-----------------------------------------------------------------------------}
//Trend Settings
//-----------------------------------------------------------------------------{
FastLength          = input.int(16,         step = 1, title = 'Fast Length', group = "Trend Settings")
MediumLength        = input.int(32,         step = 1, title = 'Medium Length', group = "Trend Settings")
SlowLength          = input.int(64,         step = 1, title = 'Slow Length', group = "Trend Settings")
zerolag             = input(true,           title ="Use Zero Lag", group = "Trend Settings")
showtrend           = input(false,          title ="Show Trend Line", group = "Trend Settings")

//-----------------------------------------------------------------------------}
//Mean Reversion Settings
//-----------------------------------------------------------------------------{
Equilibriumlength   = input.int(32,         step = 1, title = 'Equilibrium Average Length', group = "Mean Reversion Settings")
Quantilelength      = input.int(64,         step = 1, title = 'Quantile Average Length', group = "Mean Reversion Settings")
MeanForecScalar     = input.float(20,       step = 0.1, title = 'Forecast Scalar', group = "Mean Reversion Settings")
MeanStra            = input(true,           title ="Use Mean Reversion (Stock Only)", group = "Mean Reversion Settings")
Meanzerolag         = input(true,           title ="Use Zero Lag", group = "Mean Reversion Settings")

//-----------------------------------------------------------------------------}
//Risk Settings
//-----------------------------------------------------------------------------{
StdLength           = input.int(25,         title = "Standard Deviation Length", group="Risk Settings")
TargetRisk          = input.float(0.16,     maxval = 1, step = 0.01, title = 'Target Risk (%)', group="Risk Settings")
CarryProp           = input.float(0.4,      maxval = 1, step = 0.1, title = 'Carry Trade Proportion (%)', group="Risk Settings")
DeviationPer        = input.float(0.1,      maxval = 1, step = 0.1, title = 'Momentum Change Limit (%)', group="Risk Settings")
MarginCal           = input(false,          title="Margin Account", group="Risk Settings")

//-----------------------------------------------------------------------------}
//EMA Calculation
//-----------------------------------------------------------------------------{
//Fast EMA
lsmaR4              = ta.ema(close, FastLength)
lsmaR4S             = ta.ema(lsmaR4, FastLength)
eq4                 = lsmaR4 - lsmaR4S
FastEMA             = zerolag ? lsmaR4 + eq4 : ta.ema(close, FastLength)

lsmaR4A             = ta.ema(close, (FastLength*4))
lsmaR4SA            = ta.ema(lsmaR4A, (FastLength*4))
eq4A                = lsmaR4A - lsmaR4SA
FastSEMA            = zerolag ? lsmaR4A + eq4A : ta.ema(close, (FastLength*4))

//Medium EMA
lsmaR5              = ta.ema(close, MediumLength)
lsmaR5S             = ta.ema(lsmaR5, MediumLength)
eq5                 = lsmaR5 - lsmaR5S
MediumEMA           = zerolag ? lsmaR5 + eq5 : ta.ema(close, MediumLength)

lsmaR5A             = ta.ema(close, (MediumLength*4))
lsmaR5SA            = ta.ema(lsmaR5A, (MediumLength*4))
eq5A                = lsmaR5A - lsmaR5SA
MediumSEMA          = zerolag ? lsmaR5A + eq5A : ta.ema(close, (MediumLength*4))

//Slow EMA
lsmaR6              = ta.ema(close, SlowLength)
lsmaR6S             = ta.ema(lsmaR6, SlowLength)
eq6                 = lsmaR6 - lsmaR6S
SlowEMA             = zerolag ? lsmaR6 + eq6 : ta.ema(close, SlowLength)

lsmaR6A             = ta.ema(close, (SlowLength*4))
lsmaR6SA            = ta.ema(lsmaR6A, (SlowLength*4))
eq6A                = lsmaR6A - lsmaR6SA
SlowSEMA            = zerolag ? lsmaR6A + eq6A : ta.ema(close, (SlowLength*4))

//-----------------------------------------------------------------------------}
//Trend Filter
//-----------------------------------------------------------------------------{
Trenddiff           = SlowEMA - SlowSEMA
Bullish             = Trenddiff[0] > Trenddiff[1] and Trenddiff >= 0
Bearish             = Trenddiff[0] < Trenddiff[1] and Trenddiff < 0
SemiBull            = Trenddiff[0] < Trenddiff[1] and Trenddiff >= 0
SemiBear            = Trenddiff[0] > Trenddiff[1] and Trenddiff < 0

//-----------------------------------------------------------------------------}
//Individual Asset Calculation
//-----------------------------------------------------------------------------{
var float CappedForc        = na
var float CappedForcF       = na
var float CappedForcM       = na
var float CappedForcS       = na

//Instrument Calculation
//-----------------------------------------------------------------------------{
PercentChange               = array.new_float(0)
AdjustedLength              = StdLength - 1

// Loop through the last closing prices and add them to the array
for i = 0 to AdjustedLength
    array.push(PercentChange, ((close[i]-close[i+1])/close[i+1]))

// Calculate the standard deviation of the percent change
DailyPVol                   = math.round(array.stdev(PercentChange, false), 6)
InstRisk                    = math.round((DailyPVol * 16), 6)

//Fast Forecast
//-----------------------------------------------------------------------------{
RiskAdjF                    = (FastEMA - FastSEMA) / DailyPVol
ScaledForcF                 = RiskAdjF * 4.1

if ScaledForcF <= -20
    CappedForcF             := -20
else if ScaledForcF > -20 and ScaledForcF < 20
    CappedForcF             := ScaledForcF
else if ScaledForcF >= 20
    CappedForcF             := 20  

//Medium Forecast
//-----------------------------------------------------------------------------{
RiskAdjM                    = (MediumEMA - MediumSEMA) / DailyPVol
ScaledForcM                 = RiskAdjM * 2.79

if ScaledForcM <= -20
    CappedForcM             := -20
else if ScaledForcM > -20 and ScaledForcM < 20
    CappedForcM             := CappedForcM
else if ScaledForcM >= 20
    CappedForcM             := 20 

//Slow Forecast
//-----------------------------------------------------------------------------{
RiskAdjS                    = (SlowEMA - SlowSEMA) / DailyPVol
ScaledForcS                 = RiskAdjS * 1.91

if ScaledForcS <= -20
    CappedForcS             := -20
else if ScaledForcS > -20 and ScaledForcS < 20
    CappedForcS             := ScaledForcS
else if ScaledForcS >= 20
    CappedForcS             := 20 

//Forecast Combination
//-----------------------------------------------------------------------------{
ComCappedForc               = (CappedForcF + CappedForcM + CappedForcS)/3

if ComCappedForc <= -20
    CappedForc              := -20
else if ComCappedForc > -20 and ComCappedForc < 20
    CappedForc              := ComCappedForc
else if ComCappedForc >= 20
    CappedForc              := 20 

//-----------------------------------------------------------------------------}
//Mean Reversion Forcast Calculation
//-----------------------------------------------------------------------------{
//Equilibrium EMA Calculation
//-----------------------------------------------------------------------------{
EquilibriumlsmaR            = ta.ema(close, Equilibriumlength)
EquilibriumlsmaS            = ta.ema(EquilibriumlsmaR, Equilibriumlength)
Eeq                         = EquilibriumlsmaR - EquilibriumlsmaS
Equilibrium                 = Meanzerolag ? EquilibriumlsmaR + Eeq : ta.ema(close, Equilibriumlength)

//Risk Adjusted Forecast Calculation
//-----------------------------------------------------------------------------{
MeanRawForec                = Equilibrium - close
MeanSigmaP                  = (close * InstRisk) / 16
MeanRiskAdjustedForec       = MeanRawForec / MeanSigmaP

//Volatility Multiplier
//-----------------------------------------------------------------------------{
VolatilityRef               = input.symbol(title = "Primary Source", defval="S5TH", group = "Volatility Settings", inline = "source")
Quantile                    = request.security(VolatilityRef, "D", close)

ModifiedQuantile            = 2 - (1.5 * (Quantile / 10))

QuantilelsmaR               = ta.ema(ModifiedQuantile, Quantilelength)
QuantilelsmaS               = ta.ema(QuantilelsmaR, Quantilelength)
Qeq                         = QuantilelsmaR - QuantilelsmaS
MeanVolatilitylsma          = Meanzerolag ? QuantilelsmaR + Qeq : ta.ema(ModifiedQuantile, Quantilelength)

MeanModifiedRiskAdjForec    = MeanRiskAdjustedForec * MeanVolatilitylsma
MeanScaledForc              = MeanRiskAdjustedForec * MeanForecScalar

var float MeanCappedForc    = na

if MeanScaledForc <= -20
    MeanCappedForc          := -20
else if MeanScaledForc > -20 and MeanScaledForc < 20
    MeanCappedForc          := MeanScaledForc
else if MeanScaledForc >= 20
    MeanCappedForc          := 20  

//-----------------------------------------------------------------------------}
//Notional Exposure & Risk-Adjusted Position
//-----------------------------------------------------------------------------{
MeanStraProp                = (1 - CarryProp) / 2
TrandStraProp               = (1 - CarryProp)

MeanRiskFactor              = MarginCal ? (CappedForc * MeanStraProp / 10) + (MeanCappedForc * MeanStraProp / 10) + CarryProp : (CappedForc * MeanStraProp / 20) + (MeanCappedForc * MeanStraProp / 20) + CarryProp 
OnlyTrandRiskFactor         = MarginCal ? (CappedForc * TrandStraProp / 10) + CarryProp : (CappedForc * TrandStraProp / 20) + CarryProp

OptimalSizing               = MeanStra ? (MeanRiskFactor * strategy.equity * TargetRisk) / (InstRisk * close) : (OnlyTrandRiskFactor * strategy.equity * TargetRisk) / (InstRisk * close)
OptimalPosition             = math.round(OptimalSizing, 0)

//Buffer Zone
//-----------------------------------------------------------------------------{
BufferWidth                 = (DeviationPer * strategy.equity * TargetRisk) / (InstRisk * close)
LowerBuffer                 = math.round(OptimalPosition - BufferWidth, 0)
UpperBuffer                 = math.round(OptimalPosition + BufferWidth, 0)

CurrentSize                 = strategy.position_size

//Position Adjustment Signal & Position
//-----------------------------------------------------------------------------{
InitialBuy                  = ta.crossover(SlowEMA, SlowSEMA)
AdjustBuy                   = MarginCal ? ta.crossunder(CurrentSize, LowerBuffer) : ta.crossunder(CurrentSize, LowerBuffer) and strategy.equity > (OptimalPosition * close)
AdjustSell                  = ta.crossover(CurrentSize, UpperBuffer)

//Current Proportion
//-----------------------------------------------------------------------------{
var float CurrentProportion1    = 0

CurrentHoldingValue             = strategy.position_size * close
CurrentProportion               = CurrentHoldingValue / strategy.equity

if CurrentProportion >= 1 and MarginCal == true
    CurrentProportion           := CurrentProportion
else if CurrentProportion >= 1 and MarginCal == false
    CurrentProportion           := 1

RecSize                         = math.round(OptimalPosition - strategy.position_size, 0)
if RecSize <= 0
    RecSize                     := 0

//-----------------------------------------------------------------------------}
//Strategy
//-----------------------------------------------------------------------------{
//Carry Buy Condition
//-----------------------------------------------------------------------------{  
if InitialBuy
    strategy.entry("L", strategy.long, qty = RecSize)
else if AdjustBuy
    strategy.entry("L", strategy.long, qty = (UpperBuffer - CurrentSize))
else if AdjustSell
    strategy.close("L", qty = (CurrentSize - UpperBuffer))

// Calculate net profit and percentage profitable
//-----------------------------------------------------------------------------{ 
net_profit          = strategy.netprofit
percent_profitable  = math.round(strategy.wintrades / (strategy.wintrades + strategy.losstrades), 2)

//Table Styling
//-----------------------------------------------------------------------------{ 
bgMColour           = color.rgb(0, 0, 0, 30)
bgSColour           = color.rgb(0, 0, 0, 20)
    
if net_profit > 0
    bgMColour       := color.rgb(8, 153, 129)
    bgSColour       := color.rgb(8, 153, 129, 20)
else
    bgMColour       := color.rgb(242, 54, 69)
    bgSColour       := color.rgb(242, 54, 69, 20)
    
//-----------------------------------------------------------------------------}
//Summary Table
//-----------------------------------------------------------------------------{ 
table_data          = table.new(position = position.top_right, columns = 1, rows = 4, bgcolor = color.rgb(0, 0, 0, 100), frame_width = 1, border_width = 1)

table.cell(table_data, 0, 0, 'CMR782', bgcolor = color.rgb(255, 255, 255, 70), text_size = size.normal, text_color = color.rgb(255, 255, 255))   
table.cell(table_data, 0, 1, str.tostring("$" + str.tostring(math.round(net_profit,0))), text_size = size.normal, bgcolor = bgMColour, text_color = color.rgb(255, 255, 255), text_halign  = text.align_center, tooltip = "Net Profit")
table.cell(table_data, 0, 2, str.tostring(str.tostring(math.round(percent_profitable * 100,0)) + "%"), text_size = size.normal, bgcolor = bgSColour, text_color = color.rgb(255, 255, 255), text_halign  = text.align_center, tooltip = "Percent Profitable")
table.cell(table_data, 0, 3, str.tostring(str.tostring(math.round(CurrentProportion * 100,0)) + "%"), bgcolor = color.rgb(255, 255, 255, 85), text_size = size.normal, text_color = color.rgb(255, 255, 255), tooltip = "Percent Risk")

//-----------------------------------------------------------------------------}
//Entry & Exit Signal
//-----------------------------------------------------------------------------{
plotshape(InitialBuy,   title='Initial Buy', text = "▲", textcolor = color.white, style=shape.labelup, location=location.belowbar, color=color.rgb(8, 153, 129, 50), size=size.tiny)
plotshape(AdjustBuy,    title='Adjust Buy', text = "△", textcolor = color.white, style=shape.labelup, location=location.belowbar, color=color.rgb(8, 153, 129, 50), size=size.tiny)
plotshape(AdjustSell,   title='Adjust Sell', text = "✘", textcolor = color.white, style=shape.labeldown, location=location.abovebar, color=color.rgb(242, 54, 69, 50), size=size.tiny)

//-----------------------------------------------------------------------------}
//Bar & Trend Line Colours
//-----------------------------------------------------------------------------{
NeutralColor        = #56328f
BearColor           = color.rgb(242, 54, 69)
SemiBearColor       = color.rgb(242, 54, 69, 50)
BullColor           = color.rgb(8, 153, 129)
SemiBullColor       = color.rgb(8, 153, 129, 50)

//Style
var col             = color.rgb(120, 123, 134, 100)
var fillG           = color.rgb(120, 123, 134, 100)

if Trenddiff[0] > Trenddiff[1] and Trenddiff >= 0 and showtrend == true
    col             := BullColor
    fillG           := color.rgb(8, 153, 129, 85)
else if Trenddiff[0] < Trenddiff[1] and Trenddiff >= 0 and showtrend == true
    col             := BullColor
    fillG           := color.rgb(8, 153, 129, 95)
else if Trenddiff[0] < Trenddiff[1] and Trenddiff < 0 and showtrend == true
    col             := BearColor
    fillG           := color.rgb(242, 54, 70, 85)
else if Trenddiff[0] > Trenddiff[1] and Trenddiff < 0 and showtrend == true
    col             := BearColor
    fillG           := color.rgb(242, 54, 70, 95)
else
    col             := color.rgb(120, 123, 134, 100)
    fillG           := color.rgb(120, 123, 134, 100)

barcolor(Bullish ? BullColor : Bearish ? BearColor : SemiBull ? SemiBullColor : SemiBear ? SemiBearColor : NeutralColor)

plotFast            = plot(SlowEMA, color=col, linewidth=1) 
plotSlow            = plot(SlowSEMA, color=col, linewidth=1)

fill(plotFast, plotSlow, color = fillG, fillgaps = true) 

//-----------------------------------------------------------------------------}
//Alert
//-----------------------------------------------------------------------------{
if AdjustBuy or AdjustSell
    alert("Position Adjusted", alert.freq_once_per_bar_close)

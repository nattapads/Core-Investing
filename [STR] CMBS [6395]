//NSal
//@version=5
strategy("[STR] CMBS [6395]", overlay = true, margin_long = 50, margin_short = 50, pyramiding = 100, initial_capital = 10000, risk_free_rate = 1, commission_value = 0.165)

//------------------------------------------------------------------------------
//Settings
//-----------------------------------------------------------------------------{
start_time                  = input.time(timestamp("Jan 01 1920 00:00:00"), title="Start Time")
in_time_window              = time >= start_time

//-----------------------------------------------------------------------------}
//Momentum  Settings
//-----------------------------------------------------------------------------{
FastScalar                  = input.float(4.10,     step = 0.01, title = "EMA 16 Scalar", group = "Momentum Settings")
MediumScalar                = input.float(2.79,     step = 0.01, title = "EMA 32 Scalar", group = "Momentum Settings")
SlowScalar                  = input.float(1.91,     step = 0.01, title = "EMA 64 Scalar", group = "Momentum Settings")
showtrend                   = input(true,           title ="Show Momentum Line", group = "Momentum Settings")

//-----------------------------------------------------------------------------}
//Breakout  Settings
//-----------------------------------------------------------------------------{
BrProp                      = input.float(0.2,      maxval = 0.9, step = 0.1, title = "Breakout Proportion (%)", group = "Breakout Settings")
Bo20Scalar                  = input.float(0.67,     step = 0.01, title = "Breakout 20 Scalar", group = "Breakout Settings")
Bo40Scalar                  = input.float(0.70,     step = 0.01, title = "Breakout 40 Scalar", group = "Breakout Settings")
Bo80Scalar                  = input.float(0.73,     step = 0.01, title = "Breakout 80 Scalar", group = "Breakout Settings")

//-----------------------------------------------------------------------------}
//Skew  Settings
//-----------------------------------------------------------------------------{
SkProp                      = input.float(0.0,      maxval = 0.9, step = 0.1, title = "Skew Proportion (%)", group = "Skew Settings")
Sk60Scalar                  = input.float(33.3,     step = 0.1, title = "Skew 60 Scalar", group = "Skew Settings")
Sk120Scalar                 = input.float(37.2,     step = 0.1, title = "Skew 120 Scalar", group = "Skew Settings")
Sk240Scalar                 = input.float(39.2,     step = 0.1, title = "Skew 240 Scalar", group = "Skew Settings")

//-----------------------------------------------------------------------------}
//Carry Settings
//-----------------------------------------------------------------------------{
CrProp                      = input.float(0.6,      maxval = 0.99, step = 0.1, title = "Carry Proportion (%)", group="Carry Settings", tooltip = "Higher proportion causes higher percent risk")
ExpectedDiv                 = input.float(0.03,     maxval = 0.99, step = 0.001, title = "Expected Annualised Return % (%)", group="Carry Settings", tooltip = "Expacted dividend yield or Median dividend yield")
CarryForecScalar            = input.int(30,         step = 1, title = "Carry Scalar", group = "Carry Settings")

//-----------------------------------------------------------------------------}
//Risk Settings
//-----------------------------------------------------------------------------{
SMStdLength                 = input.int(22,         title = "Simple SD Length", group="Risk Settings")
TargetRisk                  = input.float(0.20,     maxval = 1, step = 0.01, title = "Target Risk (%)", group="Risk Settings", tooltip = "16% is recommended for trading no maore than 3 instruments")
DeviationPer                = input.float(0.1,      maxval = 1, step = 0.1, title = "Change Sensitivity (%)", group="Risk Settings", tooltip = "Higher sensitivity causes less frequent trades, and lower trading costs")
FDM                         = input.float(1.29,     step = 0.01, title = "Forecast Diversification Multiplier", group = "Risk Settings")
MarginCal                   = input(false,          title = "Margin Account", group="Risk Settings")

//-----------------------------------------------------------------------------{
//Instrument Risk Calculation
//-----------------------------------------------------------------------------{
PercentChange               = array.new_float(0)
AdjustedLength              = SMStdLength - 1
ReturnChange                = close

// Loop through the last price change and add them to the array
for i = 0 to AdjustedLength
    array.push(PercentChange, ((ReturnChange[i] - ReturnChange[i+1]) / ReturnChange[i+1]))

// Calculate the standard deviation of the percent change
DailyPercentVol             = math.round(array.stdev(PercentChange, false), 6)
InstRisk                    = math.round((DailyPercentVol * 16), 6)
DailyPriceVol               = DailyPercentVol * close

//-----------------------------------------------------------------------------}
//Momentum Calculation
//-----------------------------------------------------------------------------{
FastLength                  = 16
MediumLength                = 32
SlowLength                  = 64

//Fast Momentum
//-----------------------------------------------------------------------------{
Fast4Length                 = FastLength * 4
FastEMA                     = ta.ema(close, FastLength)
FastSEMA                    = ta.ema(close, Fast4Length)

//Medium Momentum
//-----------------------------------------------------------------------------{
Medium4Length               = MediumLength * 4
MediumEMA                   = ta.ema(close, MediumLength)
MediumSEMA                  = ta.ema(close, Medium4Length)

//Slow Momentum
//-----------------------------------------------------------------------------{
Slow4Length                 = SlowLength * 4
SlowEMA                     = ta.ema(close, SlowLength)
SlowSEMA                    = ta.ema(close, Slow4Length)

//-----------------------------------------------------------------------------}
//Momentum Forcast Calculation
//-----------------------------------------------------------------------------{
var float CappedForcF       = na
var float CappedForcM       = na
var float CappedForcS       = na

//Fast Momentum Forecast
//-----------------------------------------------------------------------------{
RiskAdjF                    = (FastEMA - FastSEMA) / DailyPriceVol
ScaledForcF                 = RiskAdjF * FastScalar

if ScaledForcF <= -20
    CappedForcF             := -20
else if ScaledForcF > -20 and ScaledForcF < 20
    CappedForcF             := ScaledForcF
else if ScaledForcF >= 20
    CappedForcF             := 20  

//Medium Momentum Forecast
//-----------------------------------------------------------------------------{
RiskAdjM                    = (MediumEMA - MediumSEMA) / DailyPriceVol
ScaledForcM                 = RiskAdjM * MediumScalar

if ScaledForcM <= -20
    CappedForcM             := -20
else if ScaledForcM > -20 and ScaledForcM < 20
    CappedForcM             := ScaledForcM
else if ScaledForcM >= 20
    CappedForcM             := 20 

//Slow Momentum Forecast
//-----------------------------------------------------------------------------{
RiskAdjS                    = (SlowEMA - SlowSEMA) / DailyPriceVol
ScaledForcS                 = RiskAdjS * SlowScalar

if ScaledForcS <= -20
    CappedForcS             := -20
else if ScaledForcS > -20 and ScaledForcS < 20
    CappedForcS             := ScaledForcS
else if ScaledForcS >= 20
    CappedForcS             := 20 

//Momentum Forecast Combination
//-----------------------------------------------------------------------------{
CappedForcMo                = (CappedForcF + CappedForcM + CappedForcS) / 3

//-----------------------------------------------------------------------------}
//Momentum Filter Calculation
//-----------------------------------------------------------------------------{
Trenddiff                   = SlowEMA - SlowSEMA
StrongBullish               = Trenddiff[0] > Trenddiff[1] and Trenddiff >= 0
StrongBearish               = Trenddiff[0] < Trenddiff[1] and Trenddiff < 0
Bullish                     = Trenddiff[0] < Trenddiff[1] and Trenddiff >= 0
Bearish                     = Trenddiff[0] > Trenddiff[1] and Trenddiff < 0

//-----------------------------------------------------------------------------}
//Breakout Forcast Calculation
//-----------------------------------------------------------------------------{
var float CappedForcBo20    = na
var float CappedForcBo40    = na
var float CappedForcBo80    = na
var float CappedForcBo160   = na
var float CappedForcBo320   = na

//Breakout 20
//-----------------------------------------------------------------------------{
Max20                       = ta.highest(high, 20)
Min20                       = ta.lowest(low, 20)
Mean20                      = (Max20 + Min20) / 2
Bo20Forc                    = (40 * (close - Mean20)) /  (Max20 - Min20)
SmBo20Forc                  = ta.ema(Bo20Forc, 5)
ScalSmBo20Forc              = SmBo20Forc * Bo20Scalar

if ScalSmBo20Forc <= -20
    CappedForcBo20          := -20
else if ScalSmBo20Forc > -20 and ScalSmBo20Forc < 20
    CappedForcBo20          := ScalSmBo20Forc
else if ScalSmBo20Forc >= 20
    CappedForcBo20          := 20 

//Breakout 40
//-----------------------------------------------------------------------------{
Max40                       = ta.highest(high, 40)
Min40                       = ta.lowest(low, 40)
Mean40                      = (Max40 + Min40) / 2
Bo40Forc                    = (40 * (close - Mean40)) /  (Max40 - Min40)
SmBo40Forc                  = ta.ema(Bo40Forc, 10)
ScalSmBo40Forc              = SmBo40Forc * Bo40Scalar

if ScalSmBo40Forc <= -20
    CappedForcBo40          := -20
else if ScalSmBo40Forc > -20 and ScalSmBo40Forc < 20
    CappedForcBo40          := ScalSmBo40Forc
else if ScalSmBo40Forc >= 20
    CappedForcBo40          := 20 

//Breakout 80
//-----------------------------------------------------------------------------{
Max80                       = ta.highest(high, 80)
Min80                       = ta.lowest(low, 80)
Mean80                      = (Max80 + Min80) / 2
Bo80Forc                    = (40 * (close - Mean80)) /  (Max80 - Min80)
SmBo80Forc                  = ta.ema(Bo80Forc, 20)
ScalSmBo80Forc              = SmBo80Forc * Bo80Scalar

if ScalSmBo80Forc <= -20
    CappedForcBo80          := -20
else if ScalSmBo80Forc > -20 and ScalSmBo80Forc < 20
    CappedForcBo80          := ScalSmBo80Forc
else if ScalSmBo80Forc >= 20
    CappedForcBo80          := 20 

//Breakout Forecast Combination
//-----------------------------------------------------------------------------{
CappedForcBo                = (CappedForcBo20 + CappedForcBo40 + CappedForcBo80) / 3

//-----------------------------------------------------------------------------}
//Skew Forcast Calculation
//-----------------------------------------------------------------------------{
var float CappedForcSk60    = na
var float CappedForcSk120   = na
var float CappedForcSk240   = na

skewness(roc, length) =>
    avg = ta.sma(roc, length)
    stdv = ta.stdev(roc, length)
    sum = math.pow(roc - avg, 3)
    for i = 1 to length - 1
        sum := sum + math.pow(roc[i] - avg, 3)
    ((sum / length) / math.pow(stdv, 3))

//Skew 60
//-----------------------------------------------------------------------------{
Sk60raw                     = skewness(close, 60)
Sk60Forc                    = ta.ema(Sk60raw, 15)
ScalSk60                    = Sk60Forc * Sk60Scalar

if ScalSk60 <= -20
    CappedForcSk60          := -20
else if ScalSk60 > -20 and ScalSk60 < 20
    CappedForcSk60          := ScalSk60
else if ScalSk60 >= 20
    CappedForcSk60          := 20 

//Skew 120
//-----------------------------------------------------------------------------{
Sk120raw                    = skewness(close, 120)
Sk120Forc                   = ta.ema(Sk120raw, 30)
ScalSk120                   = Sk120Forc * Sk120Scalar

if ScalSk120 <= -20
    CappedForcSk120         := -20
else if ScalSk120 > -20 and ScalSk120 < 20
    CappedForcSk120         := ScalSk120
else if ScalSk120 >= 20
    CappedForcSk120         := 20 

//Skew 240
//-----------------------------------------------------------------------------{
Sk240raw                    = skewness(close, 240)
Sk240Forc                   = ta.ema(Sk240raw, 60)
ScalSk240                   = Sk240Forc * Sk240Scalar

if ScalSk240 <= -20
    CappedForcSk240         := -20
else if ScalSk240 > -20 and ScalSk240 < 20
    CappedForcSk240         := ScalSk240
else if ScalSk240 >= 20
    CappedForcSk240         := 20 

//Skew Forecast Combination
//-----------------------------------------------------------------------------{
CappedForcSk                = (ScalSk60 + ScalSk120 + ScalSk240) / 3

//-----------------------------------------------------------------------------}
//Carry Forcast Calculation
//-----------------------------------------------------------------------------{
var float CappedForcCr      = na

CarryScaledForc             = CarryForecScalar * ExpectedDiv / InstRisk

if CarryScaledForc <= -20
    CappedForcCr            := -20
else if CarryScaledForc > -20 and CarryScaledForc < 20
    CappedForcCr            := CarryScaledForc
else if CarryScaledForc >= 20
    CappedForcCr            := 20

//All Forecast Combination
//-----------------------------------------------------------------------------{
var float CappedCombForc    = na

MoProp                      = 1 - BrProp - CrProp - SkProp
CombForc                    = (CappedForcMo * MoProp) + (CappedForcBo * BrProp) + (CappedForcCr * CrProp) + (CappedForcSk * SkProp)
ScalCombForc                = CombForc * FDM

if ScalCombForc <= -20
    CappedCombForc          := -20
else if ScalCombForc > -20 and ScalCombForc < 20
    CappedCombForc          := ScalCombForc
else if ScalCombForc >= 20
    CappedCombForc          := 20 

AdjCombForc                 = MarginCal ? CappedCombForc / 10 : CappedCombForc / 20

//-----------------------------------------------------------------------------}
//Notional Exposure & Risk-Adjusted Position
//-----------------------------------------------------------------------------{
OptimalSizing               = (AdjCombForc * strategy.equity * TargetRisk) / (InstRisk * close)
OptimalPosition             = math.round(OptimalSizing, 0)

//Buffer Zone
//-----------------------------------------------------------------------------{
BufferWidth                 = (DeviationPer * strategy.equity * TargetRisk) / (InstRisk * close)
LowerBuffer                 = math.round(OptimalPosition - BufferWidth, 0)
UpperBuffer                 = math.round(OptimalPosition + BufferWidth, 0)

CurrentSize                 = strategy.position_size

//Position Adjustment Signal & Position
//-----------------------------------------------------------------------------{
BuyQty                      = math.abs(math.round(LowerBuffer - CurrentSize, 0))
AdjBuyQty                   = math.abs(math.round(CurrentSize - UpperBuffer, 0))

Buy                         = MarginCal ? OptimalPosition > 0 and OptimalPosition > CurrentSize and CurrentSize < LowerBuffer and BuyQty >= 1 : OptimalPosition > 0 and OptimalPosition > CurrentSize and CurrentSize < LowerBuffer and BuyQty >= 1 and strategy.equity > (OptimalPosition * close)
AdjustBuy                   = CurrentSize > 0 and CurrentSize > UpperBuffer and AdjBuyQty >= 1

//Current Proportion
//-----------------------------------------------------------------------------{
CurrentHoldingValue         = strategy.position_size * close
CurrentProportion           = CurrentHoldingValue / strategy.equity

RecSize                     = math.round(OptimalPosition - strategy.position_size, 0)
if RecSize <= 0
    RecSize                 := 0

AdjustBuyQty                = LowerBuffer - CurrentSize

//-----------------------------------------------------------------------------}
//Strategy
//-----------------------------------------------------------------------------{ 
if Buy and in_time_window
    strategy.entry("B", strategy.long, qty = BuyQty)
else if AdjustBuy and in_time_window
    strategy.close("B", qty = AdjBuyQty)

// Calculate net profit and percentage profitable
//-----------------------------------------------------------------------------{ 
net_profit                  = strategy.netprofit
percent_profitable          = math.round(strategy.wintrades / (strategy.wintrades + strategy.losstrades), 2)

//Table Styling
//-----------------------------------------------------------------------------{ 
bgMColour                   = color.rgb(0, 0, 0, 30)
bgSColour                   = color.rgb(0, 0, 0, 20)
    
if net_profit > 0
    bgMColour               := color.rgb(8, 153, 129)
    bgSColour               := color.rgb(8, 153, 129, 20)
else
    bgMColour               := color.rgb(242, 54, 69)
    bgSColour               := color.rgb(242, 54, 69, 20)
    
//-----------------------------------------------------------------------------}
//Summary Table
//-----------------------------------------------------------------------------{ 
table_data                  = table.new(position = position.bottom_right, columns = 1, rows = 5, bgcolor = color.rgb(0, 0, 0, 100), frame_width = 1, border_width = 1)

table.cell(table_data, 0, 0, "CMBS782", bgcolor = color.rgb(255, 255, 255, 70), text_size = size.normal, text_color = color.rgb(255, 255, 255))   
table.cell(table_data, 0, 1, str.tostring("$" + str.tostring(math.round(net_profit,0))), text_size = size.normal, bgcolor = bgMColour, text_color = color.rgb(255, 255, 255), text_halign  = text.align_center, tooltip = "Net Profit")
table.cell(table_data, 0, 2, str.tostring(str.tostring(math.round(percent_profitable * 100,0)) + "%"), text_size = size.normal, bgcolor = bgSColour, text_color = color.rgb(255, 255, 255), text_halign  = text.align_center, tooltip = "Percent Profitable")
table.cell(table_data, 0, 3, str.tostring("$" + str.tostring(math.round(strategy.max_drawdown,0))), text_size = size.normal, bgcolor = color.rgb(242, 54, 69, 30), text_color = color.rgb(255, 255, 255), text_halign  = text.align_center, tooltip = "Max Drawdown")
table.cell(table_data, 0, 4, str.tostring(str.tostring(math.round(CurrentProportion * 100,0)) + "%"), bgcolor = color.rgb(255, 255, 255, 90), text_size = size.normal, text_color = color.rgb(255, 255, 255), tooltip = "Percent Risk")

//-----------------------------------------------------------------------------}
//Entry & Exit Signal
//-----------------------------------------------------------------------------{
plotshape(Buy,       title = "Initial Buy",  text = "▲", textcolor = color.white, style=shape.labelup, location=location.belowbar, color=color.rgb(8, 153, 129, 70), size=size.tiny)
plotshape(AdjustBuy,       title = "Adjust Sell",  text = "✘", textcolor = color.white, style=shape.labeldown, location=location.abovebar, color=color.rgb(242, 54, 69, 70), size=size.tiny)

//-----------------------------------------------------------------------------}
//Bar & Trend Line Colours
//-----------------------------------------------------------------------------{
NeutralColor                = #56328f
StrongBullColor             = color.rgb(8, 153, 129)
BullColor                   = color.rgb(8, 153, 129, 50)
StrongBearishColor          = color.rgb(242, 54, 69)
BearColor                   = color.rgb(242, 54, 69, 50)

//Style Adjustment
//-----------------------------------------------------------------------------{
var col                     = color.rgb(120, 123, 134, 100)
var fillG                   = color.rgb(120, 123, 134, 100)

if Trenddiff[0] > Trenddiff[1] and Trenddiff >= 0 and showtrend == true
    col                     := BullColor
    fillG                   := color.rgb(8, 153, 129, 85)
else if Trenddiff[0] < Trenddiff[1] and Trenddiff >= 0 and showtrend == true
    col                     := BullColor
    fillG                   := color.rgb(8, 153, 129, 95)
else if Trenddiff[0] < Trenddiff[1] and Trenddiff < 0 and showtrend == true
    col                     := BearColor
    fillG                   := color.rgb(242, 54, 70, 85)
else if Trenddiff[0] > Trenddiff[1] and Trenddiff < 0 and showtrend == true
    col                     := BearColor
    fillG                   := color.rgb(242, 54, 70, 95)
else
    col                     := color.rgb(120, 123, 134, 100)
    fillG                   := color.rgb(120, 123, 134, 100)

plotFastMA                  = plot(SlowEMA,     "Fast Momentum", color=col, linewidth=1) 
plotSlowMA                  = plot(SlowSEMA,    "Slow Momentum", color=col, linewidth=1)

fill(plotFastMA, plotSlowMA, color = fillG, title = "Momentum Color", fillgaps = true) 
barcolor(StrongBullish ? StrongBullColor : StrongBearish ? StrongBearishColor : Bullish ? BullColor : Bearish ? BearColor : NeutralColor)

//-----------------------------------------------------------------------------}
//Alert
//-----------------------------------------------------------------------------{
if Buy or AdjustBuy
    alert("Position Adjusted", alert.freq_once_per_bar_close)

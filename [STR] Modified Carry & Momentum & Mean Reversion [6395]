//NSal
//@version=5
strategy("[STR] Modified Carry & Momentum & Mean Reversion [6395]", overlay = true, margin_long = 50, margin_short = 50, pyramiding = 100, initial_capital = 10000, risk_free_rate = 1, commission_value = 0.165)

//-----------------------------------------------------------------------------}
//Momentum  Settings
//-----------------------------------------------------------------------------{
FastLength                  = input.int(16,         step = 1, title = "Fast Length", group = "Momentum Settings")
MediumLength                = input.int(32,         step = 1, title = "Medium Length", group = "Momentum Settings")
SlowLength                  = input.int(64,         step = 1, title = "Slow Length", group = "Momentum Settings")
FastScalar                  = input.float(4.10,     step = 0.01, title = "Fast Forecast Scalar", group = "Momentum Settings")
MediumScalar                = input.float(2.79,     step = 0.01, title = "Medium Forecast Scalar", group = "Momentum Settings")
SlowScalar                  = input.float(1.91,     step = 0.01, title = "Slow Forecast Scalar", group = "Momentum Settings")
Mfdm                        = input.float(1.08,     step = 0.01, title = "Momentum FDM", group = "Momentum Settings")
zerolag                     = input(false,           title = "Acceleration-Adjusted Momentum", group = "Momentum Settings")
showtrend                   = input(true,           title = "Show Momentum Line", group = "Momentum Settings")

//-----------------------------------------------------------------------------}
//Mean Reversion Settings
//-----------------------------------------------------------------------------{
Equilibriumlength           = input.int(5,          step = 1, title = "Equilibrium Average Length", group = "Mean Reversion Settings")
Quantilelength              = input.int(10,         step = 1, title = "Quantile Average Length", group = "Mean Reversion Settings")
MeanForecScalar             = input.float(9.3,      step = 0.1, title = "Mean-Reversion Forecast Scalar", group = "Mean Reversion Settings")
Meanzerolag                 = input(false,          title = "Acceleration-Adjusted Momentum", group = "Mean Reversion Settings")
MeanStra                    = input(false,          title = "Early Entry (US Stock or Index Only)", group="Mean Reversion Settings")

//-----------------------------------------------------------------------------}
//Carry Settings
//-----------------------------------------------------------------------------{
CarryProp                   = input.float(0.6,      maxval = 0.99, step = 0.1, title = "Carry Proportion (%)", group="Carry Settings", tooltip = "Higher proportion causes higher percent risk")
ExpectedDiv                 = input.float(0.03,     maxval = 0.99, step = 0.001, title = "Expected Annualised Return % (%)", group="Carry Settings", tooltip = "Expacted dividend yield or Median dividend yield")
CarryForecScalar            = input.int(30,         step = 1, title = "Carry Forecast Scalar", group = "Carry Settings")

//-----------------------------------------------------------------------------}
//Risk Settings
//-----------------------------------------------------------------------------{
SMStdLength                 = input.int(22,         title = "Simple SD Length", group="Risk Settings")
EWStdLength                 = input.int(32,         title = "Exponential SD Length", group="Risk Settings")
TargetRisk                  = input.float(0.16,     maxval = 1, step = 0.01, title = "Target Risk (%)", group="Risk Settings", tooltip = "16% is recommended for trading no maore than 3 instruments")
DeviationPer                = input.float(0.1,      maxval = 1, step = 0.1, title = "Change Sensitivity (%)", group="Risk Settings", tooltip = "Higher sensitivity causes less frequent trades, and lower trading costs")
SmoothOptLength             = input.int(5,          title = "Modified Optimal Position Length", group="Risk Settings")
SmoothOpt                   = input(false,          title = "Modified Optimal Position", group="Risk Settings")
Modified                    = input(false,          title = "Modified Position Adjustment", group="Risk Settings")
EWStdDv                     = input(false,          title = "Exponentially Weighted SD", group="Risk Settings")
MarginCal                   = input(false,          title = "Margin Account", group="Risk Settings")

//-----------------------------------------------------------------------------}
//Momentum Calculation
//-----------------------------------------------------------------------------{
//Fast Momentum
//-----------------------------------------------------------------------------{
lsmaRF                      = ta.ema(close, FastLength)
lsmaRFS                     = ta.ema(lsmaRF, FastLength)
eqF                         = lsmaRF - lsmaRFS
FastEMA                     = zerolag ? lsmaRF + eqF : ta.ema(close, FastLength)

Fast4Length                 = FastLength * 4
lsmaRF4                     = ta.ema(close, Fast4Length)
lsmaRF4S                    = ta.ema(lsmaRF4, Fast4Length)
eqF4                        = lsmaRF4 - lsmaRF4S
FastSEMA                    = zerolag ? lsmaRF4 + eqF4 : ta.ema(close, Fast4Length)

//Medium Momentum
//-----------------------------------------------------------------------------{
lsmaRM                      = ta.ema(close, MediumLength)
lsmaRMS                     = ta.ema(lsmaRM, MediumLength)
eqM                         = lsmaRM - lsmaRMS
MediumEMA                   = zerolag ? lsmaRM + eqM : ta.ema(close, MediumLength)

Medium4Length               = MediumLength * 4
lsmaRM4                     = ta.ema(close, Medium4Length)
lsmaRM4S                    = ta.ema(lsmaRM4, Medium4Length)
eqM4                        = lsmaRM4 - lsmaRM4S
MediumSEMA                  = zerolag ? lsmaRM4 + eqM4 : ta.ema(close, Medium4Length)

//Slow Momentum
//-----------------------------------------------------------------------------{
lsmaRS                      = ta.ema(close, SlowLength)
lsmaRSS                     = ta.ema(lsmaRS, SlowLength)
eqS                         = lsmaRS - lsmaRSS
SlowEMA                     = zerolag ? lsmaRS + eqS : ta.ema(close, SlowLength)

Slow4Length                 = SlowLength * 4
lsmaRS4                     = ta.ema(close, Slow4Length)
lsmaRS4S                    = ta.ema(lsmaRS4, Slow4Length)
eqS4                        = lsmaRS4 - lsmaRS4S
SlowSEMA                    = zerolag ? lsmaRS4 + eqS4 : ta.ema(close, Slow4Length)

//-----------------------------------------------------------------------------}
//Momentum Forcast Calculation
//-----------------------------------------------------------------------------{
var float CappedForc        = na
var float CappedForcF       = na
var float CappedForcM       = na
var float CappedForcS       = na

//Instrument Risk Calculation
//-----------------------------------------------------------------------------{
PercentChange               = array.new_float(0)
AdjustedLength              = EWStdDv ? EWStdLength - 1 : SMStdLength - 1
ReturnChange                = EWStdDv ? ta.ema(close, EWStdLength) : close

// Loop through the last price change and add them to the array
for i = 0 to AdjustedLength
    array.push(PercentChange, ((ReturnChange[i] - ReturnChange[i+1]) / ReturnChange[i+1]))

// Calculate the standard deviation of the percent change
DailyPercentVol             = math.round(array.stdev(PercentChange, false), 6)
InstRisk                    = math.round((DailyPercentVol * 16), 6)
DailyPriceVol               = DailyPercentVol * close

//Fast Momentum Forecast
//-----------------------------------------------------------------------------{
RiskAdjF                    = (FastEMA - FastSEMA) / DailyPriceVol
ScaledForcF                 = RiskAdjF * FastScalar

if ScaledForcF <= -20
    CappedForcF             := -20
else if ScaledForcF > -20 and ScaledForcF < 20
    CappedForcF             := ScaledForcF
else if ScaledForcF >= 20
    CappedForcF             := 20  

//Medium Momentum Forecast
//-----------------------------------------------------------------------------{
RiskAdjM                    = (MediumEMA - MediumSEMA) / DailyPriceVol
ScaledForcM                 = RiskAdjM * MediumScalar

if ScaledForcM <= -20
    CappedForcM             := -20
else if ScaledForcM > -20 and ScaledForcM < 20
    CappedForcM             := ScaledForcM
else if ScaledForcM >= 20
    CappedForcM             := 20 

//Slow Momentum Forecast
//-----------------------------------------------------------------------------{
RiskAdjS                    = (SlowEMA - SlowSEMA) / DailyPriceVol
ScaledForcS                 = RiskAdjS * SlowScalar

if ScaledForcS <= -20
    CappedForcS             := -20
else if ScaledForcS > -20 and ScaledForcS < 20
    CappedForcS             := ScaledForcS
else if ScaledForcS >= 20
    CappedForcS             := 20 

//Momentum Forecast Combination
//-----------------------------------------------------------------------------{
ComCappedForc               = (CappedForcF + CappedForcM + CappedForcS) * Mfdm / 3

if ComCappedForc <= -20
    CappedForc              := -20
else if ComCappedForc > -20 and ComCappedForc < 20
    CappedForc              := ComCappedForc
else if ComCappedForc >= 20
    CappedForc              := 20 

//-----------------------------------------------------------------------------}
//Momentum Filter Calculation
//-----------------------------------------------------------------------------{
Trenddiff                   = SlowEMA - SlowSEMA
StrongBullish               = Trenddiff[0] > Trenddiff[1] and Trenddiff >= 0
StrongBearish               = Trenddiff[0] < Trenddiff[1] and Trenddiff < 0
Bullish                     = Trenddiff[0] < Trenddiff[1] and Trenddiff >= 0
Bearish                     = Trenddiff[0] > Trenddiff[1] and Trenddiff < 0

//-----------------------------------------------------------------------------}
//Mean Reversion Forcast Calculation
//-----------------------------------------------------------------------------{
//Equilibrium EMA Calculation
//-----------------------------------------------------------------------------{
EquilibriumlsmaR            = ta.ema(close, Equilibriumlength)
EquilibriumlsmaS            = ta.ema(EquilibriumlsmaR, Equilibriumlength)
Eeq                         = EquilibriumlsmaR - EquilibriumlsmaS
Equilibrium                 = Meanzerolag ? EquilibriumlsmaR + Eeq : ta.ema(close, Equilibriumlength)

//Risk Adjusted Forecast Calculation
//-----------------------------------------------------------------------------{
MeanRawForec                = Equilibrium - close
MeanSigmaP                  = (close * InstRisk) / 16
MeanRiskAdjustedForec       = MeanRawForec / MeanSigmaP

//Volatility Multiplier
//-----------------------------------------------------------------------------{
VolatilityRef               = input.symbol(title = "Primary Source", defval="S5TH", group = "Volatility Settings", inline = "source")
Quantile                    = request.security(VolatilityRef, "", close)

ModifiedQuantile            = 2 - (1.5 * (Quantile / 10))

QuantilelsmaR               = ta.ema(ModifiedQuantile, Quantilelength)
QuantilelsmaS               = ta.ema(QuantilelsmaR, Quantilelength)
Qeq                         = QuantilelsmaR - QuantilelsmaS
MeanVolatilitylsma          = Meanzerolag ? QuantilelsmaR + Qeq : ta.ema(ModifiedQuantile, Quantilelength)

MeanModifiedRiskAdjForec    = MeanRiskAdjustedForec * MeanVolatilitylsma
MeanScaledForc              = MeanRiskAdjustedForec * MeanForecScalar

var float MeanCappedForc    = na

if MeanScaledForc <= -20
    MeanCappedForc          := -20
else if MeanScaledForc > -20 and MeanScaledForc < 20
    MeanCappedForc          := MeanScaledForc
else if MeanScaledForc >= 20
    MeanCappedForc          := 20  

//-----------------------------------------------------------------------------}
//Carry Forcast Calculation
//-----------------------------------------------------------------------------{
var float CarryCappedForc   = na

CarryScaledForc             = CarryForecScalar * ExpectedDiv / InstRisk

if CarryScaledForc <= -20
    CarryCappedForc         := -20
else if CarryScaledForc > -20 and CarryScaledForc < 20
    CarryCappedForc         := CarryScaledForc
else if CarryScaledForc >= 20
    CarryCappedForc         := 20

//-----------------------------------------------------------------------------}
//Notional Exposure & Risk-Adjusted Position
//-----------------------------------------------------------------------------{
MeanStraProp                = (1 - CarryProp) / 2
TrandStraProp               = (1 - CarryProp)

MeanRiskFactor              = MarginCal ? (CappedForc * MeanStraProp / 10) + (MeanCappedForc * MeanStraProp / 10) + (CarryCappedForc * CarryProp / 10) : (CappedForc * MeanStraProp / 20) + (MeanCappedForc * MeanStraProp / 20) + (CarryCappedForc * CarryProp / 10) 
OnlyTrandRiskFactor         = MarginCal ? (CappedForc * TrandStraProp / 10) + (CarryCappedForc * CarryProp / 10) : (CappedForc * TrandStraProp / 20) + (CarryCappedForc * CarryProp / 10)

OptimalSizing               = MeanStra ? (MeanRiskFactor * strategy.equity * TargetRisk) / (InstRisk * close) : (OnlyTrandRiskFactor * strategy.equity * TargetRisk) / (InstRisk * close)
RawOptimalPosition          = math.round(OptimalSizing, 0)

OptimalPosition             = SmoothOpt ? ta.ema(RawOptimalPosition, SmoothOptLength) : RawOptimalPosition

//Buffer Zone
//-----------------------------------------------------------------------------{
BufferWidth                 = (DeviationPer * strategy.equity * TargetRisk) / (InstRisk * close)
LowerBuffer                 = math.round(OptimalPosition - BufferWidth, 0)
UpperBuffer                 = math.round(OptimalPosition + BufferWidth, 0)

CurrentSize                 = strategy.position_size

//Position Adjustment Signal & Position
//-----------------------------------------------------------------------------{
InitialBuy                  = ta.crossover(SlowEMA, SlowSEMA)
AdjustBuy                   = MarginCal ? CurrentSize < LowerBuffer and SlowEMA > SlowSEMA : CurrentSize < LowerBuffer and strategy.equity > (OptimalPosition * close) and SlowEMA > SlowSEMA
AdjustSell                  = CurrentSize > UpperBuffer and CurrentSize > 0

//Current Proportion
//-----------------------------------------------------------------------------{
CurrentHoldingValue         = strategy.position_size * close
CurrentProportion           = CurrentHoldingValue / strategy.equity

RecSize                     = math.round(OptimalPosition - strategy.position_size, 0)
if RecSize <= 0
    RecSize                 := 0

AdjustBuyQty                = Modified ? (UpperBuffer - CurrentSize) : (LowerBuffer - CurrentSize)

//-----------------------------------------------------------------------------}
//Strategy
//-----------------------------------------------------------------------------{ 
if InitialBuy
    strategy.entry("B", strategy.long, qty = RecSize)
else if AdjustBuy
    strategy.entry("B", strategy.long, qty = AdjustBuyQty)
else if AdjustSell
    strategy.close("B", qty = (CurrentSize - UpperBuffer))

// Calculate net profit and percentage profitable
//-----------------------------------------------------------------------------{ 
net_profit                  = strategy.netprofit
percent_profitable          = math.round(strategy.wintrades / (strategy.wintrades + strategy.losstrades), 2)

//Table Styling
//-----------------------------------------------------------------------------{ 
bgMColour                   = color.rgb(0, 0, 0, 30)
bgSColour                   = color.rgb(0, 0, 0, 20)
    
if net_profit > 0
    bgMColour               := color.rgb(8, 153, 129)
    bgSColour               := color.rgb(8, 153, 129, 20)
else
    bgMColour               := color.rgb(242, 54, 69)
    bgSColour               := color.rgb(242, 54, 69, 20)
    
//-----------------------------------------------------------------------------}
//Summary Table
//-----------------------------------------------------------------------------{ 
table_data                  = table.new(position = position.bottom_right, columns = 1, rows = 5, bgcolor = color.rgb(0, 0, 0, 100), frame_width = 1, border_width = 1)

table.cell(table_data, 0, 0, "CMR782", bgcolor = color.rgb(255, 255, 255, 70), text_size = size.normal, text_color = color.rgb(255, 255, 255))   
table.cell(table_data, 0, 1, str.tostring("$" + str.tostring(math.round(net_profit,0))), text_size = size.normal, bgcolor = bgMColour, text_color = color.rgb(255, 255, 255), text_halign  = text.align_center, tooltip = "Net Profit")
table.cell(table_data, 0, 2, str.tostring(str.tostring(math.round(percent_profitable * 100,0)) + "%"), text_size = size.normal, bgcolor = bgSColour, text_color = color.rgb(255, 255, 255), text_halign  = text.align_center, tooltip = "Percent Profitable")
table.cell(table_data, 0, 3, str.tostring("$" + str.tostring(math.round(strategy.max_drawdown,0))), text_size = size.normal, bgcolor = color.rgb(242, 54, 69, 30), text_color = color.rgb(255, 255, 255), text_halign  = text.align_center, tooltip = "Max Drawdown")
table.cell(table_data, 0, 4, str.tostring(str.tostring(math.round(CurrentProportion * 100,0)) + "%"), bgcolor = color.rgb(255, 255, 255, 90), text_size = size.normal, text_color = color.rgb(255, 255, 255), tooltip = "Percent Risk")

//-----------------------------------------------------------------------------}
//Entry & Exit Signal
//-----------------------------------------------------------------------------{
plotshape(InitialBuy,       title = "Initial Buy",  text = "▲", textcolor = color.white, style=shape.labelup, location=location.belowbar, color=color.rgb(8, 153, 129, 70), size=size.tiny)
plotshape(AdjustBuy,        title = "Adjust Buy",   text = "△", textcolor = color.white, style=shape.labelup, location=location.belowbar, color=color.rgb(8, 153, 129, 70), size=size.tiny)
plotshape(AdjustSell,       title = "Adjust Sell",  text = "✘", textcolor = color.white, style=shape.labeldown, location=location.abovebar, color=color.rgb(242, 54, 69, 70), size=size.tiny)

//-----------------------------------------------------------------------------}
//Bar & Trend Line Colours
//-----------------------------------------------------------------------------{
NeutralColor                = #56328f
StrongBullColor             = color.rgb(8, 153, 129)
BullColor                   = color.rgb(8, 153, 129, 50)
StrongBearishColor          = color.rgb(242, 54, 69)
BearColor                   = color.rgb(242, 54, 69, 50)

//Style Adjustment
//-----------------------------------------------------------------------------{
var col                     = color.rgb(120, 123, 134, 100)
var fillG                   = color.rgb(120, 123, 134, 100)

if Trenddiff[0] > Trenddiff[1] and Trenddiff >= 0 and showtrend == true
    col                     := BullColor
    fillG                   := color.rgb(8, 153, 129, 85)
else if Trenddiff[0] < Trenddiff[1] and Trenddiff >= 0 and showtrend == true
    col                     := BullColor
    fillG                   := color.rgb(8, 153, 129, 95)
else if Trenddiff[0] < Trenddiff[1] and Trenddiff < 0 and showtrend == true
    col                     := BearColor
    fillG                   := color.rgb(242, 54, 70, 85)
else if Trenddiff[0] > Trenddiff[1] and Trenddiff < 0 and showtrend == true
    col                     := BearColor
    fillG                   := color.rgb(242, 54, 70, 95)
else
    col                     := color.rgb(120, 123, 134, 100)
    fillG                   := color.rgb(120, 123, 134, 100)

plotFastMA                  = plot(SlowEMA,     "Fast Momentum", color=col, linewidth=1) 
plotSlowMA                  = plot(SlowSEMA,    "Slow Momentum", color=col, linewidth=1)

fill(plotFastMA, plotSlowMA, color = fillG, title = "Momentum Color", fillgaps = true) 
barcolor(StrongBullish ? StrongBullColor : StrongBearish ? StrongBearishColor : Bullish ? BullColor : Bearish ? BearColor : NeutralColor)

//-----------------------------------------------------------------------------}
//Alert
//-----------------------------------------------------------------------------{
if AdjustBuy or AdjustSell
    alert("Position Adjusted", alert.freq_once_per_bar_close)
